// Decompiled with JetBrains decompiler
// Type: BuildingLibrary
// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EAF20368-35E7-4BB6-B082-5477D61019A6
// Assembly location: C:\Users\Takko\Downloads\Worldbox .NET\Assembly-CSharp.dll

using Beebyte.Obfuscator;
using strings;
using System.Collections.Generic;
using System.Reflection;
using UnityEngine;

#nullable disable
[ObfuscateLiterals]
public class BuildingLibrary : AssetLibrary<BuildingAsset>
{
  public static readonly Vector2 shadow_under_construction_bound = new Vector2(0.0f, 0.61f);
  public static readonly float shadow_under_construction_distortion = 0.19f;
  private const string TEMPLATE_CREEP = "$building_creep$";
  private const string TEMPLATE_RESOURCE = "$resource$";
  private const string TEMPLATE_MINERAL = "$mineral$";
  private const string TEMPLATE_FLORA_SMALL = "$flora_small$";
  private const string TEMPLATE_BUILDING = "$building$";
  private const string TEMPLATE_WAYPOINT = "$waypoint$";
  private const string TEMPLATE_DROP_SPREADER = "$drop_spreader$";
  private const string TEMPLATE_CITY_BUILDING = "$city_building$";
  private const string TEMPLATE_CITY_COLORED_BUILDING = "$city_colored_building$";
  private const string TEMPLATE_WINDMILL_BASE = "$windmill_base$";
  private const string TEMPLATE_WINDMILL_0 = "$windmill_0$";
  private const string TEMPLATE_WINDMILL_1 = "$windmill_1$";
  private const string TEMPLATE_BUILDING_CIV_HUMAN = "$building_civ_human$";
  private const string TEMPLATE_BUILDING_CIV_ORC = "$building_civ_orc$";
  private const string TEMPLATE_BUILDING_CIV_DWARF = "$building_civ_dwarf$";
  private const string TEMPLATE_BUILDING_CIV_ELF = "$building_civ_elf$";

  public override void init()
  {
    base.init();
    this.addTrees();
    this.addVegetation();
    this.addMinerals();
    this.addPoop();
    this.addGrownResources();
    this.addGeneralCityBuildings();
    this.addNatureBuildings();
    this.addMobBuildings();
    this.addCreeps();
    this.addHumans();
    this.addOrcs();
    this.addElves();
    this.addDwarves();
  }

  public override void post_init()
  {
    base.post_init();
    this.initBuildingsFromArchitectures();
  }

  public override void linkAssets()
  {
    base.linkAssets();
    this.checkAtlasLink(true);
    foreach (BuildingAsset buildingAsset1 in this.list)
    {
      if (buildingAsset1.step_action != null)
        buildingAsset1.has_step_action = true;
      if (buildingAsset1.get_map_icon_color != null)
        buildingAsset1.has_get_map_icon_color = true;
      BuildingAsset buildingAsset2 = buildingAsset1;
      HashSet<BiomeTag> biomeTagsGrowth = buildingAsset1.biome_tags_growth;
      // ISSUE: explicit non-virtual call
      int num1 = biomeTagsGrowth != null ? (__nonvirtual (biomeTagsGrowth.Count) > 0 ? 1 : 0) : 0;
      buildingAsset2.has_biome_tags = num1 != 0;
      BuildingAsset buildingAsset3 = buildingAsset1;
      HashSet<BiomeTag> biomeTagsSpread = buildingAsset1.biome_tags_spread;
      // ISSUE: explicit non-virtual call
      int num2 = biomeTagsSpread != null ? (__nonvirtual (biomeTagsSpread.Count) > 0 ? 1 : 0) : 0;
      buildingAsset3.has_biome_tags_spread = num2 != 0;
    }
  }

  public void checkAtlasLink(bool pWobbleTreesSettingIsActive)
  {
    foreach (BuildingAsset buildingAsset in this.list)
      buildingAsset.atlas_asset = pWobbleTreesSettingIsActive ? AssetManager.dynamic_sprites_library.get(buildingAsset.atlas_id) : AssetManager.dynamic_sprites_library.get(buildingAsset.atlas_id_fallback_when_not_wobbly);
  }

  private void initBuildingsFromArchitectures()
  {
    foreach (ArchitectureAsset architectureAsset in AssetManager.architecture_library.list)
    {
      if (!architectureAsset.isTemplateAsset() && architectureAsset.generate_buildings)
      {
        string id = architectureAsset.id;
        foreach (string styledBuildingOrder in architectureAsset.styled_building_orders)
        {
          string pNew = architectureAsset.building_ids_for_construction[styledBuildingOrder];
          string generationTarget = architectureAsset.generation_target;
          BuildingAsset building = AssetManager.architecture_library.get(generationTarget).getBuilding(styledBuildingOrder);
          BuildingAsset buildingAsset = this.clone(pNew, building.id);
          buildingAsset.group = "civ_building";
          buildingAsset.mini_civ_auto_load = true;
          buildingAsset.civ_kingdom = id;
          buildingAsset.main_path = $"buildings/civ_main/{id}/";
          buildingAsset.can_be_upgraded = false;
          buildingAsset.has_sprite_construction = true;
          if (architectureAsset.spread_biome)
          {
            buildingAsset.spread_biome = true;
            buildingAsset.spread_biome_id = architectureAsset.spread_biome_id;
          }
          buildingAsset.material = architectureAsset.material;
          if (buildingAsset.material == "jelly")
            buildingAsset.setAtlasID("buildings_wobbly", "buildings");
          buildingAsset.shadow = architectureAsset.has_shadows;
          buildingAsset.burnable = architectureAsset.burnable_buildings;
          buildingAsset.affected_by_acid = architectureAsset.acid_affected_buildings;
          switch (styledBuildingOrder)
          {
            case "order_docks_0":
              string str1 = "docks_" + id;
              buildingAsset.upgrade_to = str1;
              buildingAsset.can_be_upgraded = true;
              break;
            case "order_docks_1":
              string str2 = "fishing_docks_" + id;
              buildingAsset.upgraded_from = str2;
              buildingAsset.has_sprites_main_disabled = false;
              break;
            case "order_hall_0":
              buildingAsset.fundament = new BuildingFundament(3, 3, 4, 0);
              break;
            case "order_library":
              buildingAsset.fundament = new BuildingFundament(2, 2, 2, 0);
              break;
            case "order_temple":
              buildingAsset.fundament = new BuildingFundament(2, 2, 3, 0);
              break;
            case "order_tent":
              buildingAsset.fundament = new BuildingFundament(2, 2, 2, 0);
              break;
            case "order_watch_tower":
              buildingAsset.fundament = new BuildingFundament(1, 1, 1, 0);
              break;
            case "order_windmill_0":
              buildingAsset.fundament = new BuildingFundament(2, 2, 2, 0);
              if (buildingAsset.shadow)
              {
                buildingAsset.setShadow(0.4f, 0.38f, 0.47f);
                break;
              }
              break;
          }
        }
      }
    }
  }

  private void addTrees()
  {
    BuildingAsset pAsset = new BuildingAsset();
    pAsset.id = "tree_green_1";
    pAsset.fundament = new BuildingFundament(1, 1, 1, 0);
    pAsset.building_type = BuildingType.Building_Tree;
    pAsset.type = "type_tree";
    pAsset.destroy_on_liquid = true;
    pAsset.random_flip = true;
    pAsset.ignored_by_cities = true;
    pAsset.burnable = true;
    pAsset.affected_by_acid = true;
    pAsset.affected_by_lava = true;
    pAsset.flora = true;
    pAsset.flora_size = FloraSize.Big;
    pAsset.can_be_damaged_by_tornado = true;
    pAsset.group = "nature";
    pAsset.kingdom = "nature";
    pAsset.check_for_close_building = false;
    pAsset.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(new BiomeTag[1]);
    pAsset.material = "tree";
    pAsset.affected_by_drought = true;
    pAsset.affected_by_cold_temperature = true;
    pAsset.main_path = "buildings/trees/";
    pAsset.can_be_chopped_down = true;
    pAsset.has_resources_to_collect = true;
    pAsset.is_vegetation = true;
    this.add(pAsset);
    this.t.setAtlasID("buildings_trees", "buildings");
    this.t.nutrition_restore = 40;
    this.t.sound_spawn = "event:/SFX/NATURE/BaseFloraSpawn";
    this.t.remove_ruins = false;
    this.t.setSpread(FloraType.Tree, 10, 0.5f);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("tree_green_1");
    this.t.setShadow(0.5f, 0.14f, 0.08f);
    this.t.limit_per_zone = 3;
    this.t.can_be_living_plant = true;
    this.t.base_stats["health"] = 10f;
    this.t.addResource("wood", 5);
    this.t.has_sprites_main = true;
    this.t.has_sprites_ruin = true;
    this.clone("tree_green_2", "tree_green_1");
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("tree_green_2");
    this.clone("tree_green_3", "tree_green_1");
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("tree_green_3");
    this.clone("corrupted_tree", "tree_green_1");
    this.t.become_alive_when_chopped = true;
    this.t.limit_per_zone = 4;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Corrupted);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("corrupted_tree", "corrupted_tree_big");
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleCorruptedTree";
    this.t.affected_by_cold_temperature = false;
    this.clone("corrupted_tree_big", "corrupted_tree");
    this.t.become_alive_when_chopped = true;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Corrupted);
    this.t.fundament = new BuildingFundament(2, 2, 1, 0);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("corrupted_tree", "corrupted_tree_big");
    this.clone("enchanted_tree", "tree_green_1");
    this.t.limit_per_zone = 4;
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.2f;
    this.t.draw_light_area_offset_y = 2f;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Enchanted);
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Green, BiomeTag.Clover, BiomeTag.Flower, BiomeTag.Garlic, BiomeTag.Maple, BiomeTag.Birch, BiomeTag.Enchanted);
    this.t.setShadow(0.5f, 0.03f, 0.12f);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("enchanted_tree");
    this.clone("swamp_tree", "tree_green_1");
    this.t.fundament = new BuildingFundament(1, 1, 1, 0);
    this.t.limit_per_zone = 2;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Swamp);
    this.t.can_be_placed_on_liquid = true;
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("swamp_tree");
    this.clone("savanna_tree_1", "tree_green_1");
    this.t.limit_per_zone = 3;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Savanna);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("savanna_tree_1", "savanna_tree_big_1");
    this.clone("savanna_tree_2", "savanna_tree_1");
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("savanna_tree_2", "savanna_tree_big_2");
    this.clone("savanna_tree_big_1", "savanna_tree_1");
    this.t.fundament = new BuildingFundament(2, 2, 1, 0);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("savanna_tree_1", "savanna_tree_big_1");
    this.clone("savanna_tree_big_2", "savanna_tree_big_1");
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("savanna_tree_2", "savanna_tree_big_2");
    this.clone("mushroom_tree", "tree_green_1");
    this.t.limit_per_zone = 2;
    this.t.setSpread(FloraType.Fungi, 10, 0.45f);
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Mushroom, BiomeTag.Green);
    this.t.addResource("mushrooms", 1);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("mushroom_tree");
    this.clone("jungle_tree", "tree_green_1");
    this.t.limit_per_zone = 8;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Jungle);
    this.t.addResource("bananas", 1);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("jungle_tree");
    this.clone("infernal_tree", "tree_green_1");
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.05f;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Infernal);
    this.t.burnable = false;
    this.t.affected_by_drought = false;
    this.t.setShadow(0.1f, 0.31f, 0.33f);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("infernal_tree", "infernal_tree_small", "infernal_tree_big");
    this.t.affected_by_cold_temperature = false;
    this.clone("infernal_tree_small", "infernal_tree");
    this.t.fundament = new BuildingFundament(0, 0, 1, 0);
    this.t.setShadow(0.5f, 0.31f, 0.33f);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("infernal_tree", "infernal_tree_small", "infernal_tree_big");
    this.clone("infernal_tree_big", "infernal_tree");
    this.t.fundament = new BuildingFundament(2, 2, 1, 0);
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.1f;
    this.t.setShadow(0.37f, 0.16f, 0.2f);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("infernal_tree", "infernal_tree_small", "infernal_tree_big");
    this.clone("cacti_tree", "tree_green_1");
    this.t.affected_by_drought = false;
    this.t.vegetation_random_chance = 0.2f;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Sand);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("cacti_tree");
    this.clone("palm_tree", "tree_green_1");
    this.t.vegetation_random_chance = 0.1f;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Sand);
    this.t.setShadow(0.37f, 0.16f, 0.0f);
    this.t.addResource("coconut", 1);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("palm_tree");
    this.clone("desert_tree", "tree_green_1");
    this.t.affected_by_drought = false;
    this.t.limit_per_zone = 1;
    this.t.vegetation_random_chance = 0.1f;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Desert);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("desert_tree");
    this.clone("crystal_tree", "tree_green_1");
    this.t.affected_by_drought = false;
    this.t.burnable = false;
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.1f;
    this.t.limit_per_zone = 1;
    this.t.vegetation_random_chance = 0.1f;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Crystal, BiomeTag.Rocklands);
    this.t.material = "building";
    this.t.setAtlasID("buildings");
    this.t.sparkle_effect = true;
    this.t.addResource("wood", 5, true);
    this.t.addResource("stone", 1);
    this.t.addResource("gems", 1);
    this.t.addResource("common_metals", 1);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("crystal_tree");
    this.t.affected_by_cold_temperature = false;
    this.clone("wasteland_tree", "tree_green_1");
    this.t.vegetation_random_chance = 0.5f;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Soil, BiomeTag.Wasteland);
    this.t.affected_by_acid = false;
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("wasteland_tree");
    this.clone("candy_tree", "tree_green_1");
    this.t.limit_per_zone = 1;
    this.t.vegetation_random_chance = 0.1f;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Candy);
    this.t.addResource("candy", 3);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("candy_tree");
    this.t.affected_by_cold_temperature = false;
    this.clone("lemon_tree", "tree_green_1");
    this.t.limit_per_zone = 1;
    this.t.vegetation_random_chance = 0.1f;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Lemon, BiomeTag.Green);
    this.t.addResource("lemons", 3);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("lemon_tree");
    this.t.affected_by_cold_temperature = false;
    this.clone("pine_tree", "tree_green_1");
    this.t.vegetation_random_chance = 0.5f;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Soil, BiomeTag.Green, BiomeTag.Permafrost);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("pine_tree");
    this.t.addResource("pine_cones", 3);
    this.t.affected_by_cold_temperature = false;
    this.clone("birch_tree", "tree_green_1");
    this.t.vegetation_random_chance = 0.5f;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Green, BiomeTag.Birch);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("birch_tree");
    this.clone("maple_tree", "tree_green_1");
    this.t.vegetation_random_chance = 0.5f;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Green, BiomeTag.Maple);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("maple_tree");
    this.clone("garlic_tree", "tree_green_1");
    this.t.vegetation_random_chance = 0.5f;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Garlic);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("garlic_tree");
    this.clone("flower_tree_1", "tree_green_1");
    this.t.setSpread(FloraType.Plant, 10, 0.3f);
    this.t.vegetation_random_chance = 0.5f;
    this.t.flora_size = FloraSize.Big;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Flower);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("flower_tree_1");
    this.clone("flower_tree_2", "flower_tree_1");
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("flower_tree_2");
    this.clone("flower_tree_3", "flower_tree_1");
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("flower_tree_3");
    this.clone("rocklands_tree", "tree_green_1");
    this.t.vegetation_random_chance = 0.5f;
    this.t.material = "building";
    this.t.setAtlasID("buildings");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Rocklands);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("rocklands_tree");
    this.t.limit_in_radius = 6;
    this.t.affected_by_cold_temperature = false;
    this.clone("celestial_tree", "tree_green_1");
    this.t.can_be_living_plant = false;
    this.t.ignored_by_cities = false;
    this.t.can_be_chopped_down = false;
    this.t.material = "tree_celestial";
    this.t.setAtlasID("buildings_trees_big");
    this.t.vegetation_random_chance = 0.5f;
    this.t.setShadow(0.5f, 0.03f, 0.05f);
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Celestial);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("celestial_tree");
    this.t.fundament = new BuildingFundament(2, 2, 2, 0);
    this.t.limit_per_zone = 1;
    this.t.limit_in_radius = 30;
    this.t.affected_by_cold_temperature = false;
    this.t.draw_light_area = true;
    this.t.draw_light_size = 1f;
    this.t.addResource("celestial_avocado", 3);
    this.t.addResource("wood", 100);
    this.clone("celestial_tree_small", "tree_green_1");
    this.t.vegetation_random_chance = 0.5f;
    this.t.material = "building";
    this.t.setAtlasID("buildings_trees", "buildings");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Celestial);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("celestial_tree_small");
    this.t.limit_in_radius = 6;
    this.t.limit_per_zone = 15;
    this.t.affected_by_cold_temperature = false;
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.2f;
    this.t.addResource("celestial_avocado", 1);
    this.clone("singularity_tree", "tree_green_1");
    this.t.vegetation_random_chance = 0.5f;
    this.t.limit_per_zone = 1;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Singularity);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("singularity_tree");
    this.t.affected_by_cold_temperature = false;
    this.clone("clover_tree", "tree_green_1");
    this.t.vegetation_random_chance = 0.5f;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Clover);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("clover_tree");
    this.clone("paradox_tree", "tree_green_1");
    this.t.vegetation_random_chance = 0.5f;
    this.t.limit_per_zone = 1;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Paradox);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("paradox_tree");
    this.t.affected_by_cold_temperature = false;
  }

  private void addVegetation()
  {
    BuildingAsset pAsset = new BuildingAsset();
    pAsset.id = "$flora_small$";
    pAsset.fundament = new BuildingFundament(0, 0, 0, 0);
    pAsset.has_ruins_graphics = false;
    pAsset.destroy_on_liquid = true;
    pAsset.random_flip = true;
    pAsset.ignored_by_cities = true;
    pAsset.burnable = true;
    pAsset.affected_by_acid = true;
    pAsset.affected_by_lava = true;
    pAsset.flora = true;
    pAsset.flora_size = FloraSize.Tiny;
    pAsset.affected_by_cold_temperature = true;
    pAsset.group = "nature";
    pAsset.kingdom = "nature";
    pAsset.building_type = BuildingType.Building_Plant;
    pAsset.material = "tree";
    pAsset.main_path = "buildings/vegetation/";
    pAsset.is_vegetation = true;
    this.add(pAsset);
    this.t.setAtlasID("buildings_trees", "buildings");
    this.t.has_ruin_state = false;
    this.t.remove_ruins = false;
    this.t.setSpread(FloraType.Plant, 5, 0.3f);
    this.t.type = "type_vegetation";
    this.t.nutrition_restore = 10;
    this.t.limit_per_zone = 5;
    this.t.priority = -1;
    this.t.can_be_placed_on_blocks = false;
    this.t.base_stats["health"] = 10f;
    this.t.sound_spawn = "event:/SFX/NATURE/BaseFloraSpawn";
    this.t.shadow = false;
    this.t.addResource("herbs", 1);
    this.t.has_sprites_main = true;
    this.clone("desert_plant", "$flora_small$");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Desert);
    this.t.limit_per_zone = 3;
    this.t.addResource("desert_berries", 1, true);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("desert_plant");
    this.clone("crystal_plant", "$flora_small$");
    this.t.limit_per_zone = 2;
    this.t.setShadow(0.19f, 0.03f, 0.09f);
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Crystal);
    this.t.material = "building";
    this.t.setAtlasID("buildings");
    this.t.burnable = false;
    this.t.sparkle_effect = true;
    this.t.addResource("gems", 1, true);
    this.t.addResource("crystal_salt", 1);
    this.t.addResource("common_metals", 2);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("crystal_plant");
    this.t.affected_by_cold_temperature = false;
    this.clone("candy_plant", "$flora_small$");
    this.t.setShadow(0.19f, 0.03f, 0.09f);
    this.t.fundament = new BuildingFundament(1, 1, 1, 0);
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Candy);
    this.t.addResource("candy", 1, true);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("candy_plant");
    this.t.affected_by_cold_temperature = false;
    this.clone("snow_plant", "$flora_small$");
    this.t.limit_per_zone = 4;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Permafrost);
    this.t.addResource("snow_cucumbers", 1);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("snow_plant");
    this.t.affected_by_cold_temperature = false;
    this.clone("green_herb", "$flora_small$");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Green, BiomeTag.Lemon, BiomeTag.Jungle);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("green_herb");
    this.clone("corrupted_plant", "$flora_small$");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Corrupted);
    this.t.addResource("evil_beets", 1, true);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("corrupted_plant");
    this.t.affected_by_cold_temperature = false;
    this.clone("jungle_plant", "$flora_small$");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Jungle);
    this.t.limit_per_zone = 6;
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("jungle_plant");
    this.clone("savanna_plant", "$flora_small$");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Savanna);
    this.t.addResource("wheat", 1);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("savanna_plant");
    this.clone("mushroom_red", "$flora_small$");
    this.t.fundament = new BuildingFundament(1, 1, 1, 0);
    this.t.limit_per_zone = 9;
    this.t.setSpread(FloraType.Fungi, 4, 0.5f);
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Lemon, BiomeTag.Green, BiomeTag.Mushroom);
    this.t.biome_tags_spread = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Hills);
    this.t.addResource("mushrooms", 1, true);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("mushroom_red");
    this.clone("mushroom_green", "mushroom_red");
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("mushroom_green");
    this.clone("mushroom_teal", "mushroom_red");
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("mushroom_teal");
    this.clone("mushroom_white", "mushroom_red");
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("mushroom_white");
    this.clone("mushroom_yellow", "mushroom_red");
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("mushroom_yellow");
    this.clone("flower", "$flora_small$");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Lemon, BiomeTag.Green, BiomeTag.Mushroom, BiomeTag.Enchanted);
    this.t.type = "type_flower";
    this.t.nutrition_restore = 15;
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("flower");
    this.clone("flame_flower", "flower");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Infernal);
    this.t.burnable = false;
    this.t.addResource("peppers", 1, true);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("flame_flower");
    this.t.affected_by_cold_temperature = false;
    this.clone("jungle_flower", "flower");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Jungle);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("jungle_flower");
    this.clone("wasteland_flower", "flower");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Wasteland);
    this.t.affected_by_acid = false;
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("wasteland_flower");
    this.clone("swamp_plant", "$flora_small$");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Swamp);
    this.t.fundament = new BuildingFundament(0, 0, 0, 0);
    this.t.can_be_placed_on_liquid = true;
    this.t.limit_per_zone = 4;
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("swamp_plant", "swamp_plant_big");
    this.clone("swamp_plant_big", "swamp_plant");
    this.t.limit_per_zone = 4;
    this.t.fundament = new BuildingFundament(1, 1, 1, 0);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("swamp_plant", "swamp_plant_big");
    this.clone("birch_plant", "flower");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Birch, BiomeTag.Green);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("birch_plant");
    this.clone("maple_plant", "flower");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Maple, BiomeTag.Green);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("maple_plant");
    this.clone("flower_plant", "flower");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Flower, BiomeTag.Green);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("flower_plant");
    this.clone("garlic_plant", "flower");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Garlic, BiomeTag.Green);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("garlic_plant");
    this.clone("rocklands_plant", "flower");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Rocklands);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("rocklands_plant");
    this.t.affected_by_cold_temperature = false;
    this.clone("celestial_plant", "flower");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Celestial);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("celestial_plant");
    this.t.affected_by_cold_temperature = false;
    this.clone("singularity_plant", "flower");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Singularity);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("singularity_plant");
    this.t.affected_by_cold_temperature = false;
    this.clone("clover_plant", "flower");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Clover, BiomeTag.Green);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("clover_plant");
    this.clone("paradox_plant", "flower");
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Paradox);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("paradox_plant");
    this.t.affected_by_cold_temperature = false;
  }

  private void addMinerals()
  {
    BuildingAsset pAsset = new BuildingAsset();
    pAsset.id = "$resource$";
    pAsset.fundament = new BuildingFundament(1, 1, 1, 0);
    pAsset.has_resources_to_collect = true;
    pAsset.has_ruins_graphics = false;
    pAsset.destroy_on_liquid = true;
    pAsset.random_flip = true;
    pAsset.ignored_by_cities = false;
    pAsset.burnable = false;
    pAsset.affected_by_acid = true;
    pAsset.affected_by_lava = true;
    pAsset.group = "nature";
    pAsset.kingdom = "nature";
    pAsset.main_path = "buildings/minerals/";
    this.add(pAsset);
    this.t.setAtlasID("buildings");
    this.t.remove_ruins = false;
    this.t.can_be_placed_on_blocks = false;
    this.t.base_stats["health"] = 10f;
    this.clone("$mineral$", "$resource$");
    this.t.type = "type_mineral";
    this.t.has_ruin_state = false;
    this.t.remove_ruins = true;
    this.t.ignore_buildings = false;
    this.t.ignored_by_cities = true;
    this.t.ignore_same_building_id = true;
    this.t.building_type = BuildingType.Building_Mineral;
    this.t.vegetation_random_chance = 0.1f;
    this.t.limit_per_zone = 1;
    this.t.setShadow(0.19f, 0.03f, 0.09f);
    this.t.has_sprites_main = true;
    this.t.nutrition_restore = 30;
    this.clone("mineral_bones", "$mineral$");
    this.t.addResource("bones", 3);
    this.t.addResource("stone", 1);
    this.clone("mineral_adamantine", "$mineral$");
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.15f;
    this.t.sparkle_effect = true;
    this.t.nutrition_restore = 60;
    this.t.addResource("adamantine", 1);
    this.t.addResource("stone", 1);
    this.clone("mineral_mythril", "$mineral$");
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.1f;
    this.t.sparkle_effect = true;
    this.t.nutrition_restore = 40;
    this.t.addResource("mythril", 1);
    this.t.addResource("stone", 1);
    this.clone("mineral_gems", "$mineral$");
    this.t.sparkle_effect = true;
    this.t.nutrition_restore = 70;
    this.t.addResource("gems", 1);
    this.t.addResource("stone", 1);
    this.clone("mineral_stone", "$mineral$");
    this.t.addResource("stone", 3);
    this.clone("mineral_metals", "$mineral$");
    this.t.sparkle_effect = true;
    this.t.addResource("common_metals", 2);
    this.t.addResource("stone", 1);
    this.clone("mineral_gold", "$mineral$");
    this.t.sparkle_effect = true;
    this.t.addResource("gold", 20);
    this.t.addResource("stone", 20);
    this.clone("mineral_silver", "$mineral$");
    this.t.sparkle_effect = true;
    this.t.addResource("silver", 1);
    this.t.addResource("stone", 1);
  }

  private void addPoop()
  {
    BuildingAsset pAsset = new BuildingAsset();
    pAsset.id = "poop";
    pAsset.building_type = BuildingType.Building_Poops;
    pAsset.fundament = new BuildingFundament(0, 0, 0, 0);
    pAsset.has_ruins_graphics = false;
    pAsset.has_ruin_state = false;
    pAsset.destroy_on_liquid = true;
    pAsset.random_flip = true;
    pAsset.ignored_by_cities = true;
    pAsset.burnable = true;
    pAsset.affected_by_acid = true;
    pAsset.affected_by_lava = true;
    pAsset.flora = true;
    pAsset.flora_size = FloraSize.Tiny;
    pAsset.group = "nature";
    pAsset.kingdom = "nature";
    pAsset.main_path = "buildings/nature/";
    pAsset.removed_by_sponge = true;
    this.add(pAsset);
    this.t.scale_base = new Vector3(0.1f, 0.1f, 0.1f);
    this.t.type = "type_poop";
    this.t.remove_ruins = true;
    this.t.addResource("fertilizer", 1);
    this.t.base_stats["health"] = 10f;
  }

  private void addGrownResources()
  {
    this.clone("fruit_bush", "$resource$");
    this.t.main_path = "buildings/nature/";
    this.t.has_ruin_state = false;
    this.t.can_be_living_plant = true;
    this.t.building_type = BuildingType.Building_Fruits;
    this.t.is_vegetation = true;
    this.t.has_special_animation_state = true;
    this.t.addResource("berries", 3);
    this.t.nutrition_restore = 30;
    this.t.type = "type_fruits";
    this.t.burnable = true;
    this.t.flora = true;
    this.t.can_be_damaged_by_tornado = true;
    this.t.ignored_by_cities = true;
    this.t.vegetation_random_chance = 0.2f;
    this.t.limit_per_zone = 1;
    this.t.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Lemon, BiomeTag.Green, BiomeTag.Mushroom, BiomeTag.Enchanted, BiomeTag.Jungle, BiomeTag.Savanna, BiomeTag.Maple, BiomeTag.Birch, BiomeTag.Flower, BiomeTag.Garlic, BiomeTag.Clover);
    this.t.setSpread(FloraType.Plant, 10);
    this.t.spread_ids = AssetLibrary<BuildingAsset>.a<string>("fruit_bush");
    this.t.material = "tree";
    this.t.setAtlasID("buildings_trees", "buildings");
    this.t.setShadow(0.19f, 0.03f, 0.09f);
    this.t.has_sprites_main = true;
    this.t.has_sprites_special = true;
    this.t.gatherable = true;
    this.t.has_resources_grown_to_collect = true;
    this.t.has_resources_grown_to_collect_on_spawn = true;
    BuildingAsset pAsset = new BuildingAsset();
    pAsset.id = "wheat";
    pAsset.fundament = new BuildingFundament(0, 0, 0, 0);
    pAsset.type = "type_crops";
    pAsset.building_type = BuildingType.Building_Wheat;
    pAsset.destroy_on_liquid = true;
    pAsset.random_flip = true;
    pAsset.ignored_by_cities = true;
    pAsset.burnable = true;
    pAsset.affected_by_acid = true;
    pAsset.affected_by_lava = true;
    pAsset.flora = true;
    pAsset.can_be_damaged_by_tornado = true;
    pAsset.group = "nature";
    pAsset.kingdom = "nature";
    pAsset.shadow = false;
    pAsset.biome_tags_growth = AssetLibrary<BuildingAsset>.h<BiomeTag>(BiomeTag.Field);
    pAsset.has_ruins_graphics = false;
    pAsset.material = "tree";
    pAsset.wheat = true;
    pAsset.growth_time = 50f;
    pAsset.main_path = "buildings/nature/";
    pAsset.can_be_living_plant = true;
    pAsset.can_be_grown = true;
    this.add(pAsset);
    this.t.setAtlasID("buildings_trees", "buildings");
    this.t.nutrition_restore = 20;
    this.t.has_ruin_state = false;
    this.t.addResource("wheat", 1);
    this.t.base_stats["health"] = 10f;
    this.t.has_sprites_main = true;
    this.t.get_map_icon_color = (GetColorForMapIcon) (pBuilding =>
    {
      int animDataIndex = pBuilding.animData_index;
      return Color32.op_Implicit(Toolbox.colors_wheat[animDataIndex]);
    });
  }

  private void addGeneralCityBuildings()
  {
    BuildingAsset pAsset = new BuildingAsset();
    pAsset.id = "$building$";
    pAsset.fundament = new BuildingFundament(3, 3, 2, 0);
    pAsset.burnable = true;
    pAsset.destroy_on_liquid = true;
    pAsset.build_road_to = true;
    pAsset.affected_by_acid = true;
    pAsset.affected_by_lava = true;
    pAsset.can_be_damaged_by_tornado = true;
    pAsset.only_build_tiles = true;
    pAsset.check_for_close_building = true;
    pAsset.sound_hit = "event:/SFX/HIT/HitGeneric";
    pAsset.main_path = "buildings/nature/";
    pAsset.can_be_demolished = true;
    this.add(pAsset);
    this.t.base_stats["health"] = 1500f;
    this.t.setShadow(0.5f, 0.35f, 0.53f);
    this.clone("$city_building$", "$building$");
    this.t.building_type = BuildingType.Building_Civ;
    this.t.has_sprite_construction = true;
    this.t.main_path = "buildings/civ_general/";
    this.t.construction_progress_needed = 50;
    this.t.city_building = true;
    this.t.can_be_abandoned = true;
    this.t.build_place_batch = true;
    this.t.setShadow(0.5f, 0.37f, 0.28f);
    this.t.has_sprites_main = true;
    this.t.has_sprites_ruin = true;
    this.t.check_for_adaptation_tags = true;
    this.clone("$city_colored_building$", "$city_building$");
    this.t.has_kingdom_color = true;
    this.clone("bonfire", "$city_building$");
    this.t.burnable = false;
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.8f;
    this.t.can_be_abandoned = false;
    this.t.priority = 120;
    this.t.type = "type_bonfire";
    this.t.fundament = new BuildingFundament(2, 2, 2, 0);
    this.t.construction_progress_needed = 30;
    this.t.cost = new ConstructionCost();
    this.t.smoke = true;
    this.t.smoke_interval = 2.5f;
    this.t.smoke_offset = new Vector2Int(2, 3);
    this.t.can_be_living_house = false;
    this.t.build_place_batch = false;
    this.t.build_prefer_replace_house = true;
    this.t.check_for_close_building = false;
    this.t.max_houses = 3;
    this.t.produce_biome_food = true;
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleBonfire";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingWood";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingGeneric";
    this.t.setShadow(0.19f, 0.5f, 0.27f);
    this.t.has_sprites_main = true;
    this.t.has_sprites_ruin = true;
    this.t.check_for_adaptation_tags = false;
    this.clone("well", "$city_building$");
    this.t.priority = 21;
    this.t.type = "type_well";
    this.t.fundament = new BuildingFundament(2, 2, 1, 0);
    this.t.cost = new ConstructionCost(pStone: 20, pCommonMetals: 1, pGold: 5);
    this.t.construction_progress_needed = 200;
    this.t.burnable = false;
    this.t.max_houses = 3;
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleWell";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.t.has_sprites_main = true;
    this.t.has_sprites_ruin = true;
    this.clone("training_dummy", "$city_building$");
    this.t.priority = 23;
    this.t.type = "type_training_dummies";
    this.t.fundament = new BuildingFundament(0, 0, 0, 0);
    this.t.cost = new ConstructionCost(5, pGold: 5);
    this.t.construction_progress_needed = 100;
    this.t.burnable = true;
    this.t.max_houses = 3;
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleBarracks";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingWood";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingWood";
    this.t.has_sprite_construction = true;
    this.t.has_sprites_main = true;
    this.t.has_sprites_ruin = true;
    this.t.setShadow(0.6f, 0.27f, 0.23f);
    this.clone("stockpile", "$city_building$");
    this.t.priority = 100;
    this.t.is_stockpile = true;
    this.t.shadow = false;
    this.t.stockpile_top_left_offset = new Vector2(-2f, 3.5f);
    this.t.stockpile_center_offset = new Vector2(0.0f, 1.5f);
    this.t.storage = true;
    this.t.type = "type_stockpile";
    this.t.fundament = new BuildingFundament(3, 3, 5, 0);
    this.t.cost = new ConstructionCost();
    this.t.bonus_z = -5f;
    this.t.construction_progress_needed = 10;
    this.t.burnable = true;
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.t.has_sprites_main = true;
    this.t.has_sprites_ruin = true;
    this.clone("stockpile_fireproof", "stockpile");
    this.t.burnable = false;
    this.clone("stockpile_acidproof", "stockpile");
    this.t.affected_by_acid = false;
    this.clone("statue", "$city_building$");
    this.t.priority = 27;
    this.t.type = "type_statue";
    this.t.fundament = new BuildingFundament(1, 1, 2, 0);
    this.t.cost = new ConstructionCost(pStone: 5, pGold: 25);
    this.t.burnable = false;
    this.t.max_houses = 3;
    this.t.setShadow(0.5f, 0.17f, 0.26f);
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleStatue";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.t.has_sprites_main = true;
    this.t.has_sprites_ruin = true;
    this.clone("mine", "$city_building$");
    this.t.priority = 50;
    this.t.type = "type_mine";
    this.t.fundament = new BuildingFundament(2, 2, 2, 0);
    this.t.cost = new ConstructionCost(pGold: 15);
    this.t.construction_progress_needed = 300;
    this.t.burnable = false;
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.3f;
    this.t.build_place_single = true;
    this.t.build_place_batch = false;
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleMine";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.t.has_sprites_main = true;
    this.t.has_sprites_ruin = true;
    this.clone("$windmill_base$", "$city_colored_building$");
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.3f;
    this.t.priority = 23;
    this.t.burnable = false;
    this.t.storage = true;
    this.t.storage_only_food = true;
    this.t.type = "type_windmill";
    this.t.needs_farms_ground = true;
    this.t.build_place_center = true;
    this.t.build_place_single = true;
    this.t.build_place_batch = false;
    this.t.setShadow(0.5f, 0.23f, 0.27f);
    this.t.fundament = new BuildingFundament(1, 1, 2, 0);
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleWindmill";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingWood";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingWood";
    this.clone("$windmill_0$", "$windmill_base$");
    this.t.cost = new ConstructionCost(5, pGold: 5);
    this.t.can_be_upgraded = true;
    this.t.sound_hit = "event:/SFX/HIT/HitWood";
    this.clone("$windmill_1$", "$windmill_base$");
    this.t.cost = new ConstructionCost(pStone: 5, pCommonMetals: 5, pGold: 30);
    this.t.can_be_upgraded = false;
    this.t.has_sprite_construction = false;
  }

  private void addNatureBuildings()
  {
    this.clone("golden_brain", "$building$");
    this.t.building_type = BuildingType.Building_Nature;
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.3f;
    this.t.base_stats["health"] = 10000f;
    this.t.fundament = new BuildingFundament(1, 1, 2, 0);
    this.t.group = "golden_brain";
    this.t.kingdom = "golden_brain";
    this.t.can_be_placed_on_liquid = false;
    this.t.ignore_buildings = true;
    this.t.check_for_close_building = false;
    this.t.can_be_living_house = true;
    this.t.burnable = false;
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleGoldenBrain";
    this.t.setShadow(0.56f, 0.23f, 0.28f);
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.t.has_sprites_spawn = true;
    this.t.has_sprites_main = true;
    this.t.has_sprites_ruin = true;
    this.clone("$waypoint$", "$building$");
    this.t.waypoint = true;
    this.t.building_type = BuildingType.Building_Nature;
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.3f;
    this.t.base_stats["health"] = 10000f;
    this.t.fundament = new BuildingFundament(1, 1, 2, 0);
    this.t.group = "nature";
    this.t.can_be_placed_on_liquid = false;
    this.t.ignore_buildings = true;
    this.t.check_for_close_building = false;
    this.t.can_be_living_house = true;
    this.t.burnable = false;
    this.t.limit_global = 1;
    this.t.setShadow(0.56f, 0.23f, 0.28f);
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.t.has_sprites_spawn = true;
    this.t.has_sprites_main = true;
    this.t.has_sprites_ruin = true;
    this.clone("waypoint_alien_mold", "$waypoint$");
    this.t.kingdom = "alien_mold";
    this.clone("waypoint_computer", "$waypoint$");
    this.t.kingdom = "computer";
    this.clone("waypoint_golden_egg", "$waypoint$");
    this.t.kingdom = "golden_egg";
    this.clone("waypoint_harp", "$waypoint$");
    this.t.kingdom = "harp";
    this.clone("corrupted_brain", "$building$");
    this.t.building_type = BuildingType.Building_Nature;
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.5f;
    this.t.base_stats["health"] = 10000f;
    this.t.fundament = new BuildingFundament(1, 1, 2, 0);
    this.t.group = "corrupted_brain";
    this.t.kingdom = "corrupted_brain";
    this.t.can_be_placed_on_liquid = false;
    this.t.ignore_buildings = true;
    this.t.check_for_close_building = false;
    this.t.can_be_living_house = true;
    this.t.burnable = false;
    this.t.tower = true;
    this.t.tower_attack_buildings = false;
    this.t.tower_projectile = "madness_ball";
    this.t.tower_projectile_offset = 6f;
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleCorruptedBrain";
    this.t.sound_hit = "event:/SFX/HIT/HitFlesh";
    this.t.setShadow(0.44f, 0.38f, 0.37f);
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingFlesh";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingFlesh";
    this.t.has_sprites_spawn = true;
    this.t.has_sprites_main = true;
    this.t.has_sprites_ruin = true;
    this.clone("monolith", "$building$");
    this.t.building_type = BuildingType.Building_Nature;
    this.t.draw_light_area = true;
    this.t.ignored_by_cities = false;
    this.t.draw_light_size = 1f;
    this.t.base_stats["health"] = 50000f;
    this.t.fundament = new BuildingFundament(2, 2, 3, 0);
    this.t.group = "nature";
    this.t.kingdom = "nature";
    this.t.can_be_placed_on_liquid = false;
    this.t.ignore_buildings = true;
    this.t.check_for_close_building = false;
    this.t.can_be_living_house = true;
    this.t.burnable = false;
    this.t.setShadow(0.56f, 0.23f, 0.28f);
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.t.has_sprites_spawn = true;
    this.t.has_sprites_main = true;
    this.t.has_sprites_ruin = true;
    this.t.has_sprites_special = true;
    this.clone("beehive", "$building$");
    this.t.building_type = BuildingType.Building_Hives;
    this.t.base_stats["health"] = 100f;
    this.t.fundament = new BuildingFundament(1, 0, 1, 0);
    this.t.group = "nature";
    this.t.kingdom = "neutral_animals";
    this.t.can_be_placed_on_liquid = false;
    this.t.ignore_buildings = true;
    this.t.check_for_close_building = false;
    this.t.can_be_living_house = true;
    this.t.burnable = true;
    this.t.housing_slots = 5;
    this.t.beehive = true;
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleBeehive";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingGeneric";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingGeneric";
    this.t.has_sprites_main = true;
    this.t.has_sprites_ruin = true;
    this.t.has_special_animation_state = true;
    this.t.addResource("honey", 1);
    this.t.type = "type_hive";
    this.t.gatherable = true;
    this.t.has_resources_grown_to_collect = true;
    this.t.has_resources_grown_to_collect_on_spawn = false;
    this.clone("$drop_spreader$", "$building$");
    this.t.building_type = BuildingType.Building_Nature;
    this.t.group = "nature";
    this.t.kingdom = "nature";
    this.t.burnable = false;
    this.t.fundament = new BuildingFundament(2, 2, 2, 0);
    this.t.can_be_placed_on_blocks = true;
    this.t.destroy_on_liquid = false;
    this.t.ignored_by_cities = false;
    this.t.affected_by_lava = false;
    this.t.can_be_placed_on_liquid = true;
    this.t.has_sprites_spawn = true;
    this.t.has_sprites_main = true;
    this.t.has_sprites_ruin = true;
    this.t.has_sprites_main_disabled = true;
    this.t.can_be_damaged_by_tornado = false;
    this.t.ignore_buildings = true;
    this.t.check_for_close_building = false;
    this.t.can_be_living_house = false;
    this.t.spawn_drops = true;
    this.clone("volcano", "$drop_spreader$");
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.8f;
    this.t.transform_tiles_to_tile_type = "lava3";
    this.t.smoke = true;
    this.t.smoke_interval = 1.5f;
    this.t.smoke_offset = new Vector2Int(2, 2);
    this.t.spawn_drop_id = "lava";
    this.t.spawn_drop_start_height = 1.8f;
    this.t.spawn_drop_min_height = 5f;
    this.t.spawn_drop_max_height = 30f;
    this.t.spawn_drop_interval = 0.1f;
    this.t.spawn_drop_min_radius = 2f;
    this.t.spawn_drop_max_radius = 8f;
    this.t.step_action = (BuildingStepAction) ((pActor, pBuilding) =>
    {
      if (!pActor.asset.die_in_lava || pActor.isUnderDamageCooldown() || pBuilding.isRuin())
        return;
      pActor.getHit(200f, pAttackType: AttackType.Fire);
      if (pActor.isAlive())
        return;
      CursedSacrifice.checkGoodForSacrifice(pActor);
      pActor.skipUpdates();
    });
    this.t.setShadow(0.4f, 0.0f, 0.7f);
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleVolcano";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.clone("geyser", "$drop_spreader$");
    this.t.smoke = true;
    this.t.smoke_interval = 2.5f;
    this.t.spawn_drop_id = "rain";
    this.t.spawn_drop_start_height = 2.5f;
    this.t.spawn_drop_min_height = 10f;
    this.t.spawn_drop_max_height = 40f;
    this.t.spawn_drop_min_radius = 2f;
    this.t.spawn_drop_max_radius = 17f;
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleGeyser";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.clone("geyser_acid", "$drop_spreader$");
    this.t.smoke = true;
    this.t.smoke_interval = 3.5f;
    this.t.spawn_drop_id = "acid";
    this.t.affected_by_acid = false;
    this.t.spawn_drop_start_height = 2f;
    this.t.spawn_drop_min_height = 5f;
    this.t.spawn_drop_max_height = 36f;
    this.t.spawn_drop_min_radius = 2f;
    this.t.spawn_drop_max_radius = 15f;
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleAcidGeyser";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
  }

  private void addMobBuildings()
  {
    this.clone("flame_tower", "$building$");
    this.t.building_type = BuildingType.Building_Mob;
    this.t.main_path = "buildings/mobs/";
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.5f;
    this.t.draw_light_area_offset_y = 8f;
    this.t.base_stats["health"] = 1000f;
    this.t.fundament = new BuildingFundament(2, 2, 3, 0);
    this.t.group = "demon";
    this.t.kingdom = "demon";
    this.t.can_be_placed_on_liquid = false;
    this.t.ignore_buildings = true;
    this.t.check_for_close_building = false;
    this.t.can_be_living_house = true;
    this.t.burnable = false;
    this.t.spawn_units = true;
    this.t.spawn_units_asset = "demon";
    this.t.housing_slots = 5;
    this.t.tower = true;
    this.t.tower_attack_buildings = true;
    this.t.tower_projectile = "fireball";
    this.t.tower_projectile_offset = 10f;
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleFlameTower";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.t.has_sprites_spawn = true;
    this.t.has_sprites_main = true;
    this.t.has_sprites_ruin = true;
    this.clone("ice_tower", "$building$");
    this.t.building_type = BuildingType.Building_Mob;
    this.t.main_path = "buildings/mobs/";
    this.t.base_stats["health"] = 1000f;
    this.t.fundament = new BuildingFundament(3, 3, 4, 0);
    this.t.group = "cold_one";
    this.t.kingdom = "cold_one";
    this.t.can_be_placed_on_liquid = false;
    this.t.ignore_buildings = true;
    this.t.check_for_close_building = false;
    this.t.can_be_living_house = true;
    this.t.burnable = false;
    this.t.ice_tower = true;
    this.t.spawn_units = true;
    this.t.spawn_units_asset = "cold_one";
    this.t.housing_slots = 5;
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleIceTower";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.t.has_sprites_spawn = true;
    this.t.has_sprites_main = true;
    this.t.has_sprites_ruin = true;
    this.clone("angle_tower", "$building$");
    this.t.building_type = BuildingType.Building_Mob;
    this.t.main_path = "buildings/mobs/";
    this.t.base_stats["health"] = 1000f;
    this.t.fundament = new BuildingFundament(3, 3, 4, 0);
    this.t.group = "angle";
    this.t.kingdom = "angle";
    this.t.housing_slots = 5;
    this.t.can_be_placed_on_liquid = false;
    this.t.ignore_buildings = true;
    this.t.check_for_close_building = false;
    this.t.can_be_living_house = true;
    this.t.burnable = false;
    this.t.spawn_units = true;
    this.t.spawn_units_asset = "angle";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.t.has_sprites_spawn = true;
    this.t.has_sprites_main = true;
    this.t.has_sprites_ruin = true;
  }

  private void addCreeps()
  {
    this.clone("$building_creep$", "$building$");
    this.t.main_path = "buildings/creeps/";
    this.t.building_type = BuildingType.Building_Creep;
    this.t.has_sprites_spawn = true;
    this.t.has_sprites_main = true;
    this.t.has_sprites_ruin = true;
    this.clone("tumor", "$building_creep$");
    this.t.material = "jelly";
    this.t.setAtlasID("buildings_wobbly", "buildings");
    this.t.transform_tiles_to_top_tiles = "tumor_low";
    this.t.fundament = new BuildingFundament(1, 1, 1, 0);
    this.t.group = "tumor";
    this.t.kingdom = "tumor";
    this.t.can_be_placed_on_blocks = false;
    this.t.can_be_placed_on_liquid = false;
    this.t.ignore_buildings = true;
    this.t.check_for_close_building = false;
    this.t.can_be_living_house = false;
    this.t.spawn_units = true;
    this.t.spawn_units_asset = "tumor_monster_animal";
    this.t.housing_slots = 5;
    this.setGrowBiomeAround("biome_tumor", 5, 2, 0.1f, CreepWorkerMovementType.Direction);
    this.t.grow_creep_direction_random_position = true;
    this.t.grow_creep_flash = true;
    this.t.grow_creep_redraw_tile = true;
    this.t.setShadow(0.2f, 0.08f, 0.66f);
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleTumor";
    this.t.sound_hit = "event:/SFX/HIT/HitFlesh";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingFlesh";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingFlesh";
    this.clone("biomass", "tumor");
    this.t.group = "biomass";
    this.t.kingdom = "biomass";
    this.t.spawn_units_asset = "bioblob";
    this.t.housing_slots = 5;
    this.t.transform_tiles_to_top_tiles = "biomass_low";
    this.setGrowBiomeAround("biome_biomass", 10, 4, 0.7f, CreepWorkerMovementType.RandomNeighbourAll);
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleBiomass";
    this.t.sound_hit = "event:/SFX/HIT/HitFlesh";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingFlesh";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingFlesh";
    this.clone("super_pumpkin", "tumor");
    this.t.group = "super_pumpkin";
    this.t.kingdom = "super_pumpkin";
    this.t.spawn_units_asset = "lil_pumpkin";
    this.t.housing_slots = 5;
    this.t.transform_tiles_to_top_tiles = "pumpkin_low";
    this.setGrowBiomeAround("biome_pumpkin", 10, 3, 0.2f, CreepWorkerMovementType.Direction);
    this.t.grow_creep_direction_random_position = true;
    this.t.grow_creep_random_new_direction = true;
    this.t.grow_creep_steps_before_new_direction = 20;
    this.t.grow_creep_flash = true;
    this.t.grow_creep_redraw_tile = true;
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleSuperPumpkin";
    this.t.sound_hit = "event:/SFX/HIT/HitFlesh";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingFlesh";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingFlesh";
    this.clone("cybercore", "tumor");
    this.t.group = "assimilators";
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.2f;
    this.t.draw_light_area_offset_y = 2f;
    this.t.kingdom = "assimilators";
    this.t.spawn_units_asset = "assimilator";
    this.t.housing_slots = 5;
    this.t.transform_tiles_to_top_tiles = "cybertile_low";
    this.setGrowBiomeAround("biome_cybertile", 20, 6, 2f, CreepWorkerMovementType.Direction);
    this.t.grow_creep_steps_before_new_direction = 7;
    this.t.grow_creep_direction_random_position = false;
    this.t.grow_creep_random_new_direction = true;
    this.t.damaged_by_rain = true;
    this.t.burnable = false;
    this.t.material = "building";
    this.t.setAtlasID("buildings");
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleCybercore";
    this.t.sound_hit = "event:/SFX/HIT/HitMetal";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingRobotic";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingRobotic";
  }

  private void addHumans()
  {
    this.clone("$building_civ_human$", "$city_colored_building$");
    this.t.main_path = "buildings/civ_main/human/";
    this.t.group = "human";
    this.t.civ_kingdom = "human";
    this.clone("fishing_docks_human", "$building_civ_human$");
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.2f;
    this.t.draw_light_area_offset_y = 2f;
    this.t.sprite_path = "buildings/civ_general/fishing_dock";
    this.t.priority = 20;
    this.t.type = "type_docks";
    this.t.fundament = new BuildingFundament(2, 2, 4, 0);
    this.t.cost = new ConstructionCost(10);
    this.t.burnable = false;
    this.t.docks = true;
    this.t.can_be_placed_on_liquid = true;
    this.t.destroy_on_liquid = false;
    this.t.build_road_to = false;
    this.t.only_build_tiles = false;
    this.t.auto_remove_ruin = true;
    this.t.max_houses = 1;
    this.t.can_be_upgraded = true;
    this.t.upgrade_level = 1;
    this.t.upgrade_to = "docks_human";
    this.t.boat_types = new string[1]{ "boat_type_fishing" };
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleFishingDocks";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingWood";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingWood";
    this.t.setShadow(0.5f, 0.55f, 0.63f);
    this.clone("watch_tower_human", "$building_civ_human$");
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.5f;
    this.t.base_stats["health"] = 3000f;
    this.t.base_stats["targets"] = 1f;
    this.t.base_stats["area_of_effect"] = 1f;
    this.t.base_stats["damage"] = 50f;
    this.t.base_stats["knockback"] = 1f;
    this.t.priority = 22;
    this.t.type = "type_watch_tower";
    this.t.fundament = new BuildingFundament(1, 1, 1, 0);
    this.t.cost = new ConstructionCost(pStone: 20, pCommonMetals: 1, pGold: 5);
    this.t.burnable = false;
    this.t.tower = true;
    this.t.tower_attack_buildings = true;
    this.t.tower_projectile = "arrow";
    this.t.tower_projectile_offset = 4f;
    this.t.tower_projectile_amount = 6;
    this.t.build_place_borders = true;
    this.t.build_place_batch = false;
    this.t.build_place_single = true;
    this.t.setShadow(0.5f, 0.23f, 0.27f);
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleWatchTower";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.clone("docks_human", "fishing_docks_human");
    this.t.sprite_path = string.Empty;
    this.t.cost = new ConstructionCost(10, 6);
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.5f;
    this.t.draw_light_area_offset_y = 8f;
    this.t.can_be_upgraded = false;
    this.t.upgraded_from = "fishing_docks_human";
    this.t.boat_types = new string[3]
    {
      "boat_type_fishing",
      "boat_type_trading",
      "boat_type_transport"
    };
    this.t.setShadow(0.5f, 0.55f, 0.63f);
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleDocks";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.t.has_sprites_main_disabled = true;
    this.clone("barracks_human", "$building_civ_human$");
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.5f;
    this.t.priority = 22;
    this.t.burnable = false;
    this.t.type = "type_barracks";
    this.t.fundament = new BuildingFundament(3, 3, 4, 0);
    this.t.cost = new ConstructionCost(pStone: 5, pCommonMetals: 2, pGold: 15);
    this.t.setShadow(0.56f, 0.41f, 0.43f);
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleBarracks";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.clone("temple_human", "$building_civ_human$");
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.3f;
    this.t.draw_light_area_offset_y = 3f;
    this.t.priority = 26;
    this.t.type = "type_temple";
    this.t.fundament = new BuildingFundament(2, 2, 3, 0);
    this.t.cost = new ConstructionCost(pStone: 10, pCommonMetals: 2, pGold: 30);
    this.t.burnable = false;
    this.t.group = "human";
    this.t.max_houses = 2;
    this.t.setShadow(0.56f, 0.41f, 0.43f);
    this.t.sound_idle = "event:/SFX/BUILDINGS_IDLE/IdleTemple";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.clone("library_human", "$building_civ_human$");
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.3f;
    this.t.draw_light_area_offset_y = 3f;
    this.t.priority = 26;
    this.t.type = "type_library";
    this.t.fundament = new BuildingFundament(2, 2, 3, 0);
    this.t.cost = new ConstructionCost(pStone: 10, pCommonMetals: 2, pGold: 30);
    this.t.burnable = false;
    this.t.group = "human";
    this.t.book_slots = 5;
    this.t.setShadow(0.56f, 0.41f, 0.43f);
    this.clone("market_human", "$building_civ_human$");
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.3f;
    this.t.draw_light_area_offset_y = 3f;
    this.t.priority = 26;
    this.t.type = "type_market";
    this.t.fundament = new BuildingFundament(3, 3, 4, 0);
    this.t.cost = new ConstructionCost(10, 5, 2, 100);
    this.t.burnable = true;
    this.t.group = "human";
    this.t.setShadow(0.56f, 0.41f, 0.43f);
    this.clone("windmill_human_0", "$windmill_0$");
    this.t.group = "human";
    this.t.main_path = "buildings/civ_main/human/";
    this.t.upgrade_to = "windmill_human_1";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.t.civ_kingdom = "human";
    this.clone("windmill_human_1", "$windmill_1$");
    this.t.group = "human";
    this.t.main_path = "buildings/civ_main/human/";
    this.t.upgraded_from = "windmill_human_0";
    this.t.civ_kingdom = "human";
    this.clone("tent_human", "$building_civ_human$");
    this.t.type = "type_house";
    this.t.cost = new ConstructionCost(1);
    this.t.fundament = new BuildingFundament(2, 2, 2, 0);
    this.t.can_be_upgraded = true;
    this.t.setHousingSlots(3);
    this.t.loot_generation = 1;
    this.t.housing_happiness = 5;
    this.t.burnable = true;
    this.t.upgrade_to = "house_human_0";
    this.t.base_stats["health"] = 50f;
    this.t.build_place_batch = true;
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingGeneric";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingGeneric";
    this.clone("house_human_0", "$building_civ_human$");
    this.t.draw_light_area = true;
    this.t.draw_light_size = 0.2f;
    this.t.type = "type_house";
    this.t.cost = new ConstructionCost(5);
    this.t.setHousingSlots(3);
    this.t.loot_generation = 1;
    this.t.housing_happiness = 6;
    this.t.fundament = new BuildingFundament(1, 1, 2, 0);
    this.t.can_be_upgraded = true;
    this.t.burnable = true;
    this.t.upgrade_to = "house_human_1";
    this.t.upgraded_from = "tent_human";
    this.t.base_stats["health"] = 100f;
    this.t.has_sprite_construction = false;
    this.t.group = "human";
    this.t.sound_hit = "event:/SFX/HIT/HitWood";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingWood";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingWood";
    this.clone("house_human_1", "house_human_0");
    this.t.cost = new ConstructionCost(4);
    this.t.setHousingSlots(4);
    this.t.loot_generation = 2;
    this.t.housing_happiness = 7;
    this.t.upgrade_level = 1;
    this.t.upgrade_to = "house_human_2";
    this.t.upgraded_from = "house_human_0";
    this.t.base_stats["health"] = 150f;
    this.t.group = "human";
    this.t.sound_hit = "event:/SFX/HIT/HitWood";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingWood";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingWood";
    this.clone("house_human_2", "house_human_1");
    this.t.cost = new ConstructionCost(pStone: 5);
    this.t.upgrade_level = 2;
    this.t.loot_generation = 3;
    this.t.burnable = false;
    this.t.upgrade_to = "house_human_3";
    this.t.upgraded_from = "house_human_1";
    this.t.base_stats["health"] = 200f;
    this.t.group = "human";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.clone("house_human_3", "house_human_2");
    this.t.fundament = new BuildingFundament(2, 2, 2, 0);
    this.t.cost = new ConstructionCost(pStone: 10);
    this.t.setHousingSlots(5);
    this.t.loot_generation = 4;
    this.t.housing_happiness = 9;
    this.t.upgrade_level = 3;
    this.t.upgrade_to = "house_human_4";
    this.t.upgraded_from = "house_human_2";
    this.t.base_stats["health"] = 250f;
    this.t.group = "human";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.clone("house_human_4", "house_human_3");
    this.t.fundament = new BuildingFundament(3, 3, 2, 0);
    this.t.cost = new ConstructionCost(pStone: 15);
    this.t.setHousingSlots(6);
    this.t.loot_generation = 5;
    this.t.housing_happiness = 10;
    this.t.upgrade_level = 4;
    this.t.upgrade_to = "house_human_5";
    this.t.upgraded_from = "house_human_3";
    this.t.base_stats["health"] = 350f;
    this.t.group = "human";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.clone("house_human_5", "house_human_4");
    this.t.cost = new ConstructionCost(pStone: 20, pCommonMetals: 2, pGold: 10);
    this.t.setHousingSlots(7);
    this.t.loot_generation = 6;
    this.t.housing_happiness = 11;
    this.t.upgrade_level = 5;
    this.t.can_be_upgraded = false;
    this.t.upgrade_to = string.Empty;
    this.t.upgraded_from = "house_human_4";
    this.t.base_stats["health"] = 400f;
    this.t.group = "human";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.clone("hall_human_0", "house_human_0");
    this.t.sound_hit = "event:/SFX/HIT/HitWood";
    this.t.priority = 100;
    this.t.storage = true;
    this.t.type = "type_hall";
    this.t.cost = new ConstructionCost(10, 5);
    this.t.fundament = new BuildingFundament(3, 3, 4, 0);
    this.t.can_be_upgraded = true;
    this.t.base_stats["health"] = 200f;
    this.t.burnable = true;
    this.t.setHousingSlots(5);
    this.t.housing_happiness = 10;
    this.t.loot_generation = 3;
    this.t.upgrade_to = "hall_human_1";
    this.t.ignore_other_buildings_for_upgrade = true;
    this.t.group = "human";
    this.t.build_place_batch = true;
    this.t.max_houses = 2;
    this.t.produce_biome_food = true;
    this.t.setShadow(0.56f, 0.41f, 0.43f);
    this.t.draw_light_size = 0.3f;
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingWood";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingWood";
    this.t.book_slots = 3;
    this.t.has_sprite_construction = true;
    this.clone("hall_human_1", "hall_human_0");
    this.t.cost = new ConstructionCost(pStone: 10, pCommonMetals: 1, pGold: 20);
    this.t.setHousingSlots(8);
    this.t.loot_generation = 5;
    this.t.housing_happiness = 15;
    this.t.upgrade_level = 1;
    this.t.burnable = false;
    this.t.upgrade_to = "hall_human_2";
    this.t.upgraded_from = "hall_human_0";
    this.t.base_stats["health"] = 400f;
    this.t.group = "human";
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.draw_light_size = 0.4f;
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
    this.t.has_sprite_construction = false;
    this.clone("hall_human_2", "hall_human_1");
    this.t.cost = new ConstructionCost(pStone: 15, pCommonMetals: 1, pGold: 100);
    this.t.setHousingSlots(12);
    this.t.loot_generation = 10;
    this.t.housing_happiness = 20;
    this.t.upgrade_level = 2;
    this.t.can_be_upgraded = false;
    this.t.upgraded_from = "hall_human_1";
    this.t.upgrade_to = string.Empty;
    this.t.base_stats["health"] = 600f;
    this.t.group = "human";
    this.t.draw_light_size = 0.5f;
    this.t.sound_built = "event:/SFX/BUILDINGS/SpawnBuildingStone";
    this.t.sound_destroyed = "event:/SFX/BUILDINGS/DestroyBuildingStone";
  }

  private void addOrcs()
  {
    this.clone("$building_civ_orc$", "$city_colored_building$");
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.group = "orc";
    this.t.civ_kingdom = "orc";
    this.clone("watch_tower_orc", "watch_tower_human");
    this.t.group = "orc";
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.civ_kingdom = "orc";
    this.clone("fishing_docks_orc", "fishing_docks_human");
    this.t.group = "orc";
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.upgrade_to = "docks_orc";
    this.t.civ_kingdom = "orc";
    this.clone("docks_orc", "docks_human");
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.group = "orc";
    this.t.draw_light_area_offset_y = 8f;
    this.t.draw_light_area_offset_x = -1f;
    this.t.upgraded_from = "fishing_docks_orc";
    this.t.civ_kingdom = "orc";
    this.clone("barracks_orc", "barracks_human");
    this.t.group = "orc";
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.civ_kingdom = "orc";
    this.clone("temple_orc", "temple_human");
    this.t.group = "orc";
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.civ_kingdom = "orc";
    this.clone("library_orc", "library_human");
    this.t.group = "orc";
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.civ_kingdom = "orc";
    this.clone("market_orc", "market_human");
    this.t.group = "orc";
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.civ_kingdom = "orc";
    this.clone("windmill_orc_0", "$windmill_0$");
    this.t.group = "orc";
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.upgrade_to = "windmill_orc_1";
    this.t.civ_kingdom = "orc";
    this.clone("windmill_orc_1", "$windmill_1$");
    this.t.group = "orc";
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.upgraded_from = "windmill_orc_0";
    this.t.civ_kingdom = "orc";
    this.clone("tent_orc", "tent_human");
    this.t.fundament = new BuildingFundament(2, 2, 2, 0);
    this.t.upgrade_to = "house_orc_0";
    this.t.group = "orc";
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.civ_kingdom = "orc";
    this.clone("house_orc_0", "house_human_0");
    this.t.fundament = new BuildingFundament(1, 1, 2, 0);
    this.t.upgrade_to = "house_orc_1";
    this.t.upgraded_from = "tent_orc";
    this.t.group = "orc";
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.civ_kingdom = "orc";
    this.clone("house_orc_1", "house_human_1");
    this.t.fundament = new BuildingFundament(1, 1, 2, 0);
    this.t.upgrade_to = "house_orc_2";
    this.t.upgraded_from = "house_orc_0";
    this.t.group = "orc";
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.civ_kingdom = "orc";
    this.clone("house_orc_2", "house_human_2");
    this.t.fundament = new BuildingFundament(1, 1, 2, 0);
    this.t.upgrade_to = "house_orc_3";
    this.t.upgraded_from = "house_orc_1";
    this.t.group = "orc";
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.civ_kingdom = "orc";
    this.clone("house_orc_3", "house_human_3");
    this.t.fundament = new BuildingFundament(2, 2, 2, 0);
    this.t.upgrade_to = "house_orc_4";
    this.t.upgraded_from = "house_orc_2";
    this.t.group = "orc";
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.civ_kingdom = "orc";
    this.clone("house_orc_4", "house_human_4");
    this.t.fundament = new BuildingFundament(3, 3, 2, 0);
    this.t.upgrade_to = "house_orc_5";
    this.t.upgraded_from = "house_orc_3";
    this.t.group = "orc";
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.civ_kingdom = "orc";
    this.clone("house_orc_5", "house_human_5");
    this.t.fundament = new BuildingFundament(3, 3, 2, 0);
    this.t.group = "orc";
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.upgraded_from = "house_orc_4";
    this.t.civ_kingdom = "orc";
    this.clone("hall_orc_0", "hall_human_0");
    this.t.fundament = new BuildingFundament(3, 3, 4, 0);
    this.t.upgrade_to = "hall_orc_1";
    this.t.group = "orc";
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.civ_kingdom = "orc";
    this.clone("hall_orc_1", "hall_human_1");
    this.t.fundament = new BuildingFundament(3, 3, 4, 0);
    this.t.upgrade_to = "hall_orc_2";
    this.t.upgraded_from = "hall_orc_0";
    this.t.group = "orc";
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.civ_kingdom = "orc";
    this.clone("hall_orc_2", "hall_human_2");
    this.t.fundament = new BuildingFundament(3, 3, 4, 0);
    this.t.group = "orc";
    this.t.main_path = "buildings/civ_main/orc/";
    this.t.upgraded_from = "hall_orc_1";
    this.t.civ_kingdom = "orc";
  }

  private void addElves()
  {
    this.clone("$building_civ_elf$", "$city_colored_building$");
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.group = "elf";
    this.t.civ_kingdom = "elf";
    this.clone("watch_tower_elf", "watch_tower_human");
    this.t.group = "elf";
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.civ_kingdom = "elf";
    this.clone("fishing_docks_elf", "fishing_docks_human");
    this.t.group = "elf";
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.upgrade_to = "docks_elf";
    this.t.civ_kingdom = "elf";
    this.clone("docks_elf", "docks_human");
    this.t.group = "elf";
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.draw_light_area_offset_y = 6f;
    this.t.draw_light_area_offset_x = -2f;
    this.t.upgraded_from = "fishing_docks_elf";
    this.t.civ_kingdom = "elf";
    this.clone("barracks_elf", "barracks_human");
    this.t.group = "elf";
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.civ_kingdom = "elf";
    this.clone("temple_elf", "temple_human");
    this.t.group = "elf";
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.civ_kingdom = "elf";
    this.clone("library_elf", "library_human");
    this.t.group = "elf";
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.civ_kingdom = "elf";
    this.clone("market_elf", "market_human");
    this.t.group = "elf";
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.civ_kingdom = "elf";
    this.clone("windmill_elf_0", "$windmill_0$");
    this.t.group = "elf";
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.upgrade_to = "windmill_elf_1";
    this.t.civ_kingdom = "elf";
    this.clone("windmill_elf_1", "$windmill_1$");
    this.t.group = "elf";
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.upgraded_from = "windmill_elf_0";
    this.t.civ_kingdom = "elf";
    this.clone("tent_elf", "tent_human");
    this.t.fundament = new BuildingFundament(2, 2, 2, 0);
    this.t.upgrade_to = "house_elf_0";
    this.t.group = "elf";
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.civ_kingdom = "elf";
    this.clone("house_elf_0", "house_human_0");
    this.t.fundament = new BuildingFundament(1, 1, 2, 0);
    this.t.upgrade_to = "house_elf_1";
    this.t.upgraded_from = "tent_human";
    this.t.group = "elf";
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.civ_kingdom = "elf";
    this.clone("house_elf_1", "house_human_1");
    this.t.fundament = new BuildingFundament(1, 1, 2, 0);
    this.t.upgrade_to = "house_elf_2";
    this.t.upgraded_from = "house_elf_0";
    this.t.group = "elf";
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.civ_kingdom = "elf";
    this.clone("house_elf_2", "house_human_2");
    this.t.fundament = new BuildingFundament(1, 1, 2, 0);
    this.t.upgrade_to = "house_elf_3";
    this.t.upgraded_from = "house_elf_1";
    this.t.group = "elf";
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.civ_kingdom = "elf";
    this.clone("house_elf_3", "house_human_3");
    this.t.fundament = new BuildingFundament(2, 2, 2, 0);
    this.t.upgrade_to = "house_elf_4";
    this.t.upgraded_from = "house_elf_2";
    this.t.group = "elf";
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.civ_kingdom = "elf";
    this.clone("house_elf_4", "house_human_4");
    this.t.fundament = new BuildingFundament(3, 3, 2, 0);
    this.t.upgrade_to = "house_elf_5";
    this.t.upgraded_from = "house_elf_3";
    this.t.group = "elf";
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.civ_kingdom = "elf";
    this.clone("house_elf_5", "house_human_5");
    this.t.fundament = new BuildingFundament(3, 3, 2, 0);
    this.t.upgraded_from = "house_elf_4";
    this.t.group = "elf";
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.civ_kingdom = "elf";
    this.clone("hall_elf_0", "hall_human_0");
    this.t.fundament = new BuildingFundament(3, 3, 4, 0);
    this.t.upgrade_to = "hall_elf_1";
    this.t.group = "elf";
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.civ_kingdom = "elf";
    this.clone("hall_elf_1", "hall_human_1");
    this.t.fundament = new BuildingFundament(3, 3, 4, 0);
    this.t.upgrade_to = "hall_elf_2";
    this.t.upgraded_from = "hall_elf_0";
    this.t.group = "elf";
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.civ_kingdom = "elf";
    this.clone("hall_elf_2", "hall_human_2");
    this.t.fundament = new BuildingFundament(3, 3, 4, 0);
    this.t.group = "elf";
    this.t.main_path = "buildings/civ_main/elf/";
    this.t.upgraded_from = "hall_elf_1";
    this.t.civ_kingdom = "elf";
  }

  private void addDwarves()
  {
    this.clone("$building_civ_dwarf$", "$city_colored_building$");
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.group = "dwarf";
    this.t.civ_kingdom = "dwarf";
    this.clone("watch_tower_dwarf", "watch_tower_human");
    this.t.group = "dwarf";
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.civ_kingdom = "dwarf";
    this.clone("fishing_docks_dwarf", "fishing_docks_human");
    this.t.group = "dwarf";
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.upgrade_to = "docks_dwarf";
    this.t.civ_kingdom = "dwarf";
    this.clone("docks_dwarf", "docks_human");
    this.t.group = "dwarf";
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.draw_light_area_offset_y = 10f;
    this.t.upgraded_from = "fishing_docks_dwarf";
    this.t.civ_kingdom = "dwarf";
    this.clone("barracks_dwarf", "barracks_human");
    this.t.group = "dwarf";
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.civ_kingdom = "dwarf";
    this.clone("temple_dwarf", "temple_human");
    this.t.group = "dwarf";
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.civ_kingdom = "dwarf";
    this.clone("library_dwarf", "library_human");
    this.t.group = "dwarf";
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.civ_kingdom = "dwarf";
    this.clone("market_dwarf", "market_human");
    this.t.group = "dwarf";
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.civ_kingdom = "dwarf";
    this.clone("windmill_dwarf_0", "$windmill_0$");
    this.t.group = "dwarf";
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.upgrade_to = "windmill_dwarf_1";
    this.t.civ_kingdom = "dwarf";
    this.clone("windmill_dwarf_1", "$windmill_1$");
    this.t.group = "dwarf";
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.upgraded_from = "windmill_dwarf_0";
    this.t.civ_kingdom = "dwarf";
    this.clone("tent_dwarf", "tent_human");
    this.t.fundament = new BuildingFundament(2, 2, 2, 0);
    this.t.upgrade_to = "house_dwarf_0";
    this.t.group = "dwarf";
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.civ_kingdom = "dwarf";
    this.clone("house_dwarf_0", "house_human_0");
    this.t.fundament = new BuildingFundament(1, 1, 2, 0);
    this.t.upgrade_to = "house_dwarf_1";
    this.t.upgraded_from = "tent_dwarf";
    this.t.group = "dwarf";
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.civ_kingdom = "dwarf";
    this.clone("house_dwarf_1", "house_human_1");
    this.t.fundament = new BuildingFundament(1, 1, 2, 0);
    this.t.upgrade_to = "house_dwarf_2";
    this.t.upgraded_from = "house_dwarf_0";
    this.t.group = "dwarf";
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.civ_kingdom = "dwarf";
    this.clone("house_dwarf_2", "house_human_2");
    this.t.fundament = new BuildingFundament(1, 1, 2, 0);
    this.t.upgrade_to = "house_dwarf_3";
    this.t.upgraded_from = "house_dwarf_1";
    this.t.group = "dwarf";
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.civ_kingdom = "dwarf";
    this.clone("house_dwarf_3", "house_human_3");
    this.t.fundament = new BuildingFundament(2, 2, 2, 0);
    this.t.upgrade_to = "house_dwarf_4";
    this.t.upgraded_from = "house_dwarf_2";
    this.t.group = "dwarf";
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.setHousingSlots(6);
    this.t.civ_kingdom = "dwarf";
    this.clone("house_dwarf_4", "house_human_4");
    this.t.fundament = new BuildingFundament(3, 3, 2, 0);
    this.t.upgrade_to = "house_dwarf_5";
    this.t.upgraded_from = "house_dwarf_3";
    this.t.group = "dwarf";
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.setHousingSlots(8);
    this.t.civ_kingdom = "dwarf";
    this.clone("house_dwarf_5", "house_human_5");
    this.t.fundament = new BuildingFundament(3, 3, 2, 0);
    this.t.group = "dwarf";
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.upgraded_from = "house_dwarf_4";
    this.t.setHousingSlots(10);
    this.t.civ_kingdom = "dwarf";
    this.clone("hall_dwarf_0", "hall_human_0");
    this.t.fundament = new BuildingFundament(3, 3, 4, 0);
    this.t.upgrade_to = "hall_dwarf_1";
    this.t.group = "dwarf";
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.civ_kingdom = "dwarf";
    this.clone("hall_dwarf_1", "hall_human_1");
    this.t.fundament = new BuildingFundament(3, 3, 4, 0);
    this.t.upgrade_to = "hall_dwarf_2";
    this.t.upgraded_from = "hall_dwarf_0";
    this.t.group = "dwarf";
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.civ_kingdom = "dwarf";
    this.clone("hall_dwarf_2", "hall_human_2");
    this.t.fundament = new BuildingFundament(3, 3, 4, 0);
    this.t.group = "dwarf";
    this.t.main_path = "buildings/civ_main/dwarf/";
    this.t.upgraded_from = "1hall_dwarf";
    this.t.civ_kingdom = "dwarf";
  }

  public void setGrowBiomeAround(
    string pID,
    int pMaxSteps,
    int pWorkers,
    float pStepInterval,
    CreepWorkerMovementType pMovementType)
  {
    this.t.grow_creep = true;
    this.t.grow_creep_type = pID;
    this.t.grow_creep_steps_max = pMaxSteps;
    this.t.grow_creep_workers = pWorkers;
    this.t.grow_creep_step_interval = pStepInterval;
    this.t.grow_creep_movement_type = pMovementType;
  }

  public override void editorDiagnostic()
  {
    foreach (BuildingAsset buildingAsset in this.list)
    {
      if (!buildingAsset.mini_civ_auto_load && typeof (SB).GetField(buildingAsset.id, BindingFlags.Static | BindingFlags.Public) == (FieldInfo) null)
        BaseAssetLibrary.logAssetError("BuildingLibrary: SB class does not have property", buildingAsset.id);
      if (!(buildingAsset.type == "") && typeof (S_BuildingType).GetField(buildingAsset.type, BindingFlags.Static | BindingFlags.Public) == (FieldInfo) null)
        BaseAssetLibrary.logAssetError("BuildingLibrary: SB class does not have type property", buildingAsset.type);
    }
    base.editorDiagnostic();
  }

  public void clear()
  {
    for (int index = 0; index < this.list.Count; ++index)
      this.list[index].buildings.Clear();
  }

  public override BuildingAsset add(BuildingAsset pAsset)
  {
    BuildingAsset buildingAsset = base.add(pAsset);
    if (buildingAsset.base_stats == null)
    {
      buildingAsset.base_stats = new BaseStats();
      buildingAsset.base_stats["health"] = 100f;
      buildingAsset.base_stats["size"] = 2f;
    }
    return buildingAsset;
  }

  public string addToGameplayReport()
  {
    string str1 = "##### Buildings: \n\n" + "\nAsset ID                           | type                             | building_type                    | health                           | size                             | city_building                    | can_be_upgraded                  | upgrade_from                     | upgrade_to\n";
    int num1 = 35;
    int num2 = 35;
    foreach (BuildingAsset buildingAsset in this.list)
    {
      int num3 = 0;
      string str2 = "> " + buildingAsset.id;
      string type = buildingAsset.type;
      string str3 = buildingAsset.building_type.ToString();
      string str4 = buildingAsset.base_stats["health"].ToString();
      string str5 = buildingAsset.base_stats["size"].ToString();
      string str6 = buildingAsset.city_building.ToString();
      string str7 = buildingAsset.can_be_upgraded.ToString();
      string upgradedFrom = buildingAsset.upgraded_from;
      string upgradeTo = buildingAsset.upgrade_to;
      string str8 = str2;
      ref string local1 = ref str8;
      string pText1 = type;
      int num4 = num1;
      int num5 = num2;
      int num6 = num3;
      int num7 = num6 + 1;
      int num8 = num5 * num6;
      int pSize1 = num4 + num8;
      this.addLine(ref local1, pText1, pSize1);
      ref string local2 = ref str8;
      string pText2 = str3;
      int num9 = num1;
      int num10 = num2;
      int num11 = num7;
      int num12 = num11 + 1;
      int num13 = num10 * num11;
      int pSize2 = num9 + num13;
      this.addLine(ref local2, pText2, pSize2);
      ref string local3 = ref str8;
      string pText3 = str4;
      int num14 = num1;
      int num15 = num2;
      int num16 = num12;
      int num17 = num16 + 1;
      int num18 = num15 * num16;
      int pSize3 = num14 + num18;
      this.addLine(ref local3, pText3, pSize3);
      ref string local4 = ref str8;
      string pText4 = str5;
      int num19 = num1;
      int num20 = num2;
      int num21 = num17;
      int num22 = num21 + 1;
      int num23 = num20 * num21;
      int pSize4 = num19 + num23;
      this.addLine(ref local4, pText4, pSize4);
      ref string local5 = ref str8;
      string pText5 = str6;
      int num24 = num1;
      int num25 = num2;
      int num26 = num22;
      int num27 = num26 + 1;
      int num28 = num25 * num26;
      int pSize5 = num24 + num28;
      this.addLine(ref local5, pText5, pSize5);
      ref string local6 = ref str8;
      string pText6 = str7;
      int num29 = num1;
      int num30 = num2;
      int num31 = num27;
      int num32 = num31 + 1;
      int num33 = num30 * num31;
      int pSize6 = num29 + num33;
      this.addLine(ref local6, pText6, pSize6);
      ref string local7 = ref str8;
      string pText7 = upgradedFrom;
      int num34 = num1;
      int num35 = num2;
      int num36 = num32;
      int num37 = num36 + 1;
      int num38 = num35 * num36;
      int pSize7 = num34 + num38;
      this.addLine(ref local7, pText7, pSize7);
      ref string local8 = ref str8;
      string pText8 = upgradeTo;
      int num39 = num1;
      int num40 = num2;
      int num41 = num37;
      int num42 = num41 + 1;
      int num43 = num40 * num41;
      int pSize8 = num39 + num43;
      this.addLine(ref local8, pText8, pSize8);
      str8 += "\n";
      str1 += str8;
    }
    return $"{str1 + "\n## END OF BUILDINGS REPORT\n"}{Toolbox.getRepeatedString('=', 100)}\n\n" + "\n\n";
  }

  private void addLine(ref string pLineInfo, string pText, int pSize)
  {
    pLineInfo = Toolbox.fillRight(pLineInfo, pSize);
    pLineInfo = $"{pLineInfo}| {pText}";
  }
}
