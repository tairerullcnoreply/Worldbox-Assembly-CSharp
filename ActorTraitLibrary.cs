// Decompiled with JetBrains decompiler
// Type: ActorTraitLibrary
// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EAF20368-35E7-4BB6-B082-5477D61019A6
// Assembly location: C:\Users\Takko\Downloads\Worldbox .NET\Assembly-CSharp.dll

using Beebyte.Obfuscator;
using System;
using System.Collections.Generic;

#nullable disable
[ObfuscateLiterals]
[Serializable]
public class ActorTraitLibrary : BaseTraitLibrary<ActorTrait>
{
  public const int COMBAT_SKILLS_AMOUNT = 5;
  [NonSerialized]
  public List<ActorTrait> pot_traits_mutation_box = new List<ActorTrait>();
  [NonSerialized]
  public List<ActorTrait> pot_traits_birth = new List<ActorTrait>();
  [NonSerialized]
  public List<ActorTrait> pot_traits_growup = new List<ActorTrait>();
  [NonSerialized]
  public List<ActorTrait> pot_traits_combat = new List<ActorTrait>();

  protected override List<string> getDefaultTraitsForMeta(ActorAsset pAsset) => pAsset.traits;

  public override void init()
  {
    base.init();
    this.addTraitsSpecial();
    this.addTraitsBody();
    this.addTraitsMind();
    this.addTraitsSpirit();
    this.addTraitsAcquired();
    this.addTraitsFun();
    this.addTraitsMisc();
  }

  private void addTraitsBody()
  {
    ActorTrait pAsset1 = new ActorTrait();
    pAsset1.id = "dash";
    pAsset1.path_icon = "ui/Icons/skills/iconSkillDash";
    pAsset1.group_id = "skills";
    pAsset1.in_training_dummy_combat_pot = true;
    this.add(pAsset1);
    this.t.addCombatAction("combat_dash");
    ActorTrait pAsset2 = new ActorTrait();
    pAsset2.id = "block";
    pAsset2.path_icon = "ui/Icons/skills/iconSkillBlock";
    pAsset2.group_id = "skills";
    pAsset2.in_training_dummy_combat_pot = true;
    this.add(pAsset2);
    this.t.addCombatAction("combat_block");
    ActorTrait pAsset3 = new ActorTrait();
    pAsset3.id = "dodge";
    pAsset3.path_icon = "ui/Icons/skills/iconSkillDodge";
    pAsset3.group_id = "skills";
    pAsset3.in_training_dummy_combat_pot = true;
    this.add(pAsset3);
    this.t.addCombatAction("combat_dodge");
    ActorTrait pAsset4 = new ActorTrait();
    pAsset4.id = "backstep";
    pAsset4.path_icon = "ui/Icons/skills/iconSkillBackstep";
    pAsset4.group_id = "skills";
    pAsset4.in_training_dummy_combat_pot = true;
    this.add(pAsset4);
    this.t.addCombatAction("combat_backstep");
    ActorTrait pAsset5 = new ActorTrait();
    pAsset5.id = "deflect_projectile";
    pAsset5.path_icon = "ui/Icons/skills/iconSkillDeflectProjectile";
    pAsset5.group_id = "skills";
    pAsset5.in_training_dummy_combat_pot = true;
    this.add(pAsset5);
    this.t.addCombatAction("combat_deflect_projectile");
    ActorTrait pAsset6 = new ActorTrait();
    pAsset6.id = "mute";
    pAsset6.path_icon = "ui/Icons/actor_traits/iconMute";
    pAsset6.group_id = "body";
    pAsset6.rate_birth = 1;
    pAsset6.rate_inherit = 5;
    pAsset6.likeability = -0.1f;
    this.add(pAsset6);
    ActorTrait pAsset7 = new ActorTrait();
    pAsset7.id = "sunblessed";
    pAsset7.path_icon = "ui/Icons/actor_traits/iconSunblessed";
    pAsset7.group_id = "body";
    pAsset7.rate_birth = 2;
    pAsset7.rate_inherit = 5;
    this.add(pAsset7);
    this.t.special_effect_interval = 5f;
    ActorTrait t1 = this.t;
    t1.action_special_effect = t1.action_special_effect + new WorldAction(ActionLibrary.sunblessedEffect);
    ActorTrait pAsset8 = new ActorTrait();
    pAsset8.id = "clumsy";
    pAsset8.rarity = Rarity.R0_Normal;
    pAsset8.path_icon = "ui/Icons/actor_traits/iconClumsy";
    pAsset8.group_id = "physique";
    pAsset8.rate_birth = 5;
    pAsset8.rate_inherit = 5;
    this.add(pAsset8);
    this.t.addOpposite("long_liver");
    this.t.base_stats["multiplier_lifespan"] = -0.5f;
    ActorTrait pAsset9 = new ActorTrait();
    pAsset9.id = "fragile_health";
    pAsset9.rarity = Rarity.R0_Normal;
    pAsset9.path_icon = "ui/Icons/actor_traits/iconFrail";
    pAsset9.group_id = "health";
    pAsset9.rate_birth = 5;
    pAsset9.rate_inherit = 5;
    this.add(pAsset9);
    this.t.addOpposite("boosted_vitality");
    this.t.base_stats["multiplier_health"] = -0.5f;
    ActorTrait pAsset10 = new ActorTrait();
    pAsset10.id = "boosted_vitality";
    pAsset10.path_icon = "ui/Icons/actor_traits/iconBoostedVitality";
    pAsset10.group_id = "health";
    pAsset10.rate_birth = 5;
    pAsset10.rate_inherit = 5;
    this.add(pAsset10);
    this.t.addOpposite("fragile_health");
    this.t.base_stats["multiplier_health"] = 0.5f;
    ActorTrait pAsset11 = new ActorTrait();
    pAsset11.id = "hard_skin";
    pAsset11.rarity = Rarity.R0_Normal;
    pAsset11.path_icon = "ui/Icons/actor_traits/iconHardSkin";
    pAsset11.group_id = "physique";
    pAsset11.rate_birth = 5;
    pAsset11.rate_inherit = 5;
    this.add(pAsset11);
    this.t.addOpposite("soft_skin");
    this.t.base_stats["armor"] = 5f;
    ActorTrait pAsset12 = new ActorTrait();
    pAsset12.id = "soft_skin";
    pAsset12.rarity = Rarity.R0_Normal;
    pAsset12.path_icon = "ui/Icons/actor_traits/iconSoftSkin";
    pAsset12.group_id = "physique";
    pAsset12.rate_birth = 5;
    pAsset12.rate_inherit = 5;
    this.add(pAsset12);
    this.t.addOpposite("hard_skin");
    this.t.base_stats["armor"] = -5f;
    ActorTrait pAsset13 = new ActorTrait();
    pAsset13.id = "long_liver";
    pAsset13.rarity = Rarity.R0_Normal;
    pAsset13.path_icon = "ui/Icons/actor_traits/iconLongLiver";
    pAsset13.group_id = "health";
    pAsset13.rate_birth = 2;
    pAsset13.rate_inherit = 5;
    this.add(pAsset13);
    this.t.addOpposite("clumsy");
    this.t.base_stats["multiplier_lifespan"] = 0.5f;
    ActorTrait pAsset14 = new ActorTrait();
    pAsset14.id = "acid_touch";
    pAsset14.path_icon = "ui/Icons/actor_traits/iconAcidTouch";
    pAsset14.unlocked_with_achievement = true;
    pAsset14.achievement_id = "achievementLetsNot";
    pAsset14.group_id = "body";
    pAsset14.likeability = -0.1f;
    this.add(pAsset14);
    ActorTrait t2 = this.t;
    t2.action_special_effect = t2.action_special_effect + new WorldAction(ActionLibrary.acidTouchEffect);
    ActorTrait pAsset15 = new ActorTrait();
    pAsset15.id = "acid_blood";
    pAsset15.path_icon = "ui/Icons/actor_traits/iconAcidBlood";
    pAsset15.unlocked_with_achievement = true;
    pAsset15.achievement_id = "achievementLetsNot";
    pAsset15.group_id = "body";
    pAsset15.rate_inherit = 5;
    pAsset15.likeability = -0.1f;
    this.add(pAsset15);
    ActorTrait t3 = this.t;
    t3.action_death = t3.action_death + new WorldAction(ActionLibrary.acidBloodEffect);
    ActorTrait pAsset16 = new ActorTrait();
    pAsset16.id = "acid_proof";
    pAsset16.path_icon = "ui/Icons/actor_traits/iconAcidProof";
    pAsset16.unlocked_with_achievement = true;
    pAsset16.achievement_id = "achievementLetsNot";
    pAsset16.group_id = "protection";
    pAsset16.rate_inherit = 5;
    this.add(pAsset16);
    ActorTrait pAsset17 = new ActorTrait();
    pAsset17.id = "fire_blood";
    pAsset17.path_icon = "ui/Icons/actor_traits/iconFireBlood";
    pAsset17.group_id = "body";
    pAsset17.rate_inherit = 5;
    this.add(pAsset17);
    ActorTrait t4 = this.t;
    t4.action_death = t4.action_death + new WorldAction(ActionLibrary.fireDropsSpawn);
    ActorTrait pAsset18 = new ActorTrait();
    pAsset18.id = "fire_proof";
    pAsset18.path_icon = "ui/Icons/actor_traits/iconFireProof";
    pAsset18.group_id = "protection";
    pAsset18.rate_inherit = 5;
    this.add(pAsset18);
    this.t.base_stats.addTag("immunity_fire");
    ActorTrait pAsset19 = new ActorTrait();
    pAsset19.id = "freeze_proof";
    pAsset19.path_icon = "ui/Icons/actor_traits/iconFreezeProof";
    pAsset19.group_id = "protection";
    pAsset19.rate_inherit = 5;
    this.add(pAsset19);
    this.t.base_stats.addTag("immunity_cold");
    ActorTrait pAsset20 = new ActorTrait();
    pAsset20.id = "regeneration";
    pAsset20.path_icon = "ui/Icons/actor_traits/iconRegeneration";
    pAsset20.rate_birth = 1;
    pAsset20.rate_inherit = 5;
    pAsset20.group_id = "health";
    pAsset20.type = TraitType.Positive;
    pAsset20.special_effect_interval = 3f;
    this.add(pAsset20);
    ActorTrait t5 = this.t;
    t5.action_special_effect = t5.action_special_effect + new WorldAction(ActionLibrary.regenerationEffect);
    ActorTrait pAsset21 = new ActorTrait();
    pAsset21.id = "heliophobia";
    pAsset21.path_icon = "ui/Icons/actor_traits/iconHeliophobia";
    pAsset21.rate_inherit = 10;
    pAsset21.group_id = "body";
    pAsset21.type = TraitType.Negative;
    pAsset21.special_effect_interval = 10f;
    this.add(pAsset21);
    ActorTrait t6 = this.t;
    t6.action_special_effect = t6.action_special_effect + new WorldAction(ActionLibrary.heliophobiaEffect);
    ActorTrait pAsset22 = new ActorTrait();
    pAsset22.id = "ugly";
    pAsset22.rarity = Rarity.R0_Normal;
    pAsset22.path_icon = "ui/Icons/actor_traits/iconUgly";
    pAsset22.rate_birth = 7;
    pAsset22.same_trait_mod = 5;
    pAsset22.opposite_trait_mod = -15;
    pAsset22.likeability = -0.1f;
    pAsset22.group_id = "appearance";
    pAsset22.type = TraitType.Negative;
    this.add(pAsset22);
    this.t.base_stats["multiplier_offspring"] = -0.3f;
    this.t.addOpposite("attractive");
    ActorTrait pAsset23 = new ActorTrait();
    pAsset23.id = "fat";
    pAsset23.rarity = Rarity.R0_Normal;
    pAsset23.path_icon = "ui/Icons/actor_traits/iconFat";
    pAsset23.rate_birth = 7;
    pAsset23.rate_inherit = 5;
    pAsset23.opposite_trait_mod = -10;
    pAsset23.same_trait_mod = 10;
    pAsset23.likeability = -0.1f;
    pAsset23.group_id = "physique";
    pAsset23.type = TraitType.Negative;
    this.add(pAsset23);
    this.t.addOpposite("agile");
    this.t.addOpposite("weightless");
    this.t.base_stats["multiplier_mass"] = 0.3f;
    this.t.base_stats["scale"] = 0.02f;
    this.t.base_stats["multiplier_stamina"] = -0.5f;
    this.t.base_stats["multiplier_damage"] = 0.1f;
    ActorTrait pAsset24 = new ActorTrait();
    pAsset24.id = "attractive";
    pAsset24.path_icon = "ui/Icons/actor_traits/iconAttractive";
    pAsset24.rate_birth = 3;
    pAsset24.rate_inherit = 5;
    pAsset24.same_trait_mod = 10;
    pAsset24.likeability = 0.1f;
    pAsset24.group_id = "appearance";
    pAsset24.type = TraitType.Positive;
    this.add(pAsset24);
    this.t.addOpposite("ugly");
    this.t.base_stats["diplomacy"] = 2f;
    this.t.base_stats["stewardship"] = 1f;
    this.t.base_stats["critical_chance"] = 0.1f;
    this.t.base_stats["multiplier_offspring"] = 0.6f;
    ActorTrait pAsset25 = new ActorTrait();
    pAsset25.id = "fast";
    pAsset25.rarity = Rarity.R0_Normal;
    pAsset25.path_icon = "ui/Icons/actor_traits/iconFast";
    pAsset25.rate_birth = 4;
    pAsset25.rate_inherit = 5;
    pAsset25.remove_for_zombie_actor_asset = true;
    pAsset25.group_id = "physique";
    pAsset25.type = TraitType.Positive;
    this.add(pAsset25);
    this.t.addOpposite("slow");
    this.t.base_stats["multiplier_speed"] = 0.3f;
    this.t.base_stats["attack_speed"] = 5f;
    ActorTrait pAsset26 = new ActorTrait();
    pAsset26.id = "slow";
    pAsset26.rarity = Rarity.R0_Normal;
    pAsset26.path_icon = "ui/Icons/actor_traits/iconSlow";
    pAsset26.rate_birth = 6;
    pAsset26.rate_inherit = 5;
    pAsset26.group_id = "physique";
    pAsset26.type = TraitType.Negative;
    this.add(pAsset26);
    this.t.addOpposite("fast");
    this.t.addOpposite("agile");
    this.t.base_stats["multiplier_speed"] = -0.5f;
    this.t.base_stats["attack_speed"] = -5f;
    ActorTrait pAsset27 = new ActorTrait();
    pAsset27.id = "gluttonous";
    pAsset27.rarity = Rarity.R0_Normal;
    pAsset27.path_icon = "ui/Icons/actor_traits/iconGluttonous";
    pAsset27.rate_birth = 4;
    pAsset27.rate_inherit = 5;
    pAsset27.same_trait_mod = 5;
    pAsset27.group_id = "mind";
    pAsset27.type = TraitType.Negative;
    this.add(pAsset27);
    ActorTrait pAsset28 = new ActorTrait();
    pAsset28.id = "giant";
    pAsset28.path_icon = "ui/Icons/actor_traits/iconGiant";
    pAsset28.group_id = "physique";
    pAsset28.type = TraitType.Positive;
    pAsset28.rate_birth = 2;
    pAsset28.rate_inherit = 7;
    pAsset28.unlocked_with_achievement = true;
    pAsset28.achievement_id = "achievementTORNADO";
    this.add(pAsset28);
    this.t.addOpposite("tiny");
    this.t.base_stats["scale"] = 0.05f;
    this.t.base_stats["multiplier_health"] = 0.5f;
    this.t.base_stats["multiplier_speed"] = -0.25f;
    ActorTrait pAsset29 = new ActorTrait();
    pAsset29.id = "tiny";
    pAsset29.path_icon = "ui/Icons/actor_traits/iconTiny";
    pAsset29.group_id = "physique";
    pAsset29.type = TraitType.Negative;
    pAsset29.rate_birth = 4;
    pAsset29.rate_inherit = 7;
    pAsset29.unlocked_with_achievement = true;
    pAsset29.achievement_id = "achievementBabyTornado";
    this.add(pAsset29);
    this.t.addOpposite("giant");
    this.t.base_stats["diplomacy"] = -1f;
    this.t.base_stats["scale"] = -0.02f;
    this.t.base_stats["multiplier_health"] = -0.25f;
    this.t.base_stats["multiplier_speed"] = 0.25f;
    ActorTrait pAsset30 = new ActorTrait();
    pAsset30.id = "eagle_eyed";
    pAsset30.rarity = Rarity.R0_Normal;
    pAsset30.path_icon = "ui/Icons/actor_traits/iconEagleEye";
    pAsset30.rate_birth = 3;
    pAsset30.rate_inherit = 5;
    pAsset30.group_id = "cognitive";
    pAsset30.type = TraitType.Positive;
    this.add(pAsset30);
    this.t.addOpposite("short_sighted");
    this.t.base_stats["accuracy"] = 5f;
    this.t.base_stats["critical_chance"] = 0.15f;
    ActorTrait pAsset31 = new ActorTrait();
    pAsset31.id = "short_sighted";
    pAsset31.rarity = Rarity.R0_Normal;
    pAsset31.path_icon = "ui/Icons/actor_traits/iconShortsighted";
    pAsset31.rate_birth = 5;
    pAsset31.rate_inherit = 5;
    pAsset31.group_id = "cognitive";
    pAsset31.type = TraitType.Negative;
    this.add(pAsset31);
    this.t.addOpposite("eagle_eyed");
    this.t.base_stats["accuracy"] = -5f;
    this.t.base_stats["critical_chance"] = -0.05f;
    ActorTrait pAsset32 = new ActorTrait();
    pAsset32.id = "infertile";
    pAsset32.path_icon = "ui/Icons/actor_traits/iconInfertile";
    pAsset32.rate_birth = 1;
    pAsset32.rate_inherit = 5;
    pAsset32.group_id = "health";
    pAsset32.type = TraitType.Negative;
    this.add(pAsset32);
    this.t.addOpposite("fertile");
    this.t.base_stats["offspring"] = -99999f;
    ActorTrait pAsset33 = new ActorTrait();
    pAsset33.id = "fertile";
    pAsset33.rarity = Rarity.R0_Normal;
    pAsset33.path_icon = "ui/Icons/actor_traits/iconFertile";
    pAsset33.rate_birth = 3;
    pAsset33.rate_inherit = 7;
    pAsset33.group_id = "health";
    pAsset33.type = TraitType.Positive;
    pAsset33.likeability = 0.1f;
    this.add(pAsset33);
    this.t.addOpposite("infertile");
    this.t.base_stats["multiplier_offspring"] = 0.8f;
    this.t.base_stats["birth_rate"] = 4f;
    ActorTrait pAsset34 = new ActorTrait();
    pAsset34.id = "thorns";
    pAsset34.path_icon = "ui/Icons/actor_traits/iconThorns";
    pAsset34.group_id = "protection";
    pAsset34.rate_inherit = 5;
    this.add(pAsset34);
    ActorTrait t7 = this.t;
    t7.action_get_hit = t7.action_get_hit + new GetHitAction(ActionLibrary.thornsDefense);
    ActorTrait pAsset35 = new ActorTrait();
    pAsset35.id = "bubble_defense";
    pAsset35.path_icon = "ui/Icons/actor_traits/iconBubbleDefense";
    pAsset35.group_id = "protection";
    pAsset35.rate_inherit = 3;
    this.add(pAsset35);
    ActorTrait t8 = this.t;
    t8.action_get_hit = t8.action_get_hit + new GetHitAction(ActionLibrary.bubbleDefense);
    ActorTrait pAsset36 = new ActorTrait();
    pAsset36.id = "immune";
    pAsset36.path_icon = "ui/Icons/actor_traits/iconImmune";
    pAsset36.rate_birth = 1;
    pAsset36.rate_inherit = 10;
    pAsset36.group_id = "health";
    pAsset36.type = TraitType.Positive;
    this.add(pAsset36);
    this.t.addOpposite("plague");
    this.t.addOpposite("tumor_infection");
    this.t.addOpposite("mush_spores");
    this.t.addOpposite("infected");
    ActorTrait pAsset37 = new ActorTrait();
    pAsset37.id = "agile";
    pAsset37.path_icon = "ui/Icons/actor_traits/iconAgile";
    pAsset37.rate_birth = 3;
    pAsset37.rate_inherit = 5;
    pAsset37.same_trait_mod = 5;
    pAsset37.remove_for_zombie_actor_asset = true;
    pAsset37.group_id = "physique";
    pAsset37.type = TraitType.Positive;
    this.add(pAsset37);
    this.t.addOpposite("fat");
    this.t.addOpposite("slow");
    this.t.base_stats["lifespan"] = 3f;
    this.t.base_stats["scale"] = -0.01f;
    this.t.base_stats["stamina"] = 20f;
    this.t.base_stats["skill_combat"] = 0.2f;
    ActorTrait pAsset38 = new ActorTrait();
    pAsset38.id = "weightless";
    pAsset38.path_icon = "ui/Icons/actor_traits/iconWeightless";
    pAsset38.rate_birth = 1;
    pAsset38.rate_inherit = 5;
    pAsset38.group_id = "physique";
    this.add(pAsset38);
    this.t.addOpposite("fat");
    ActorTrait pAsset39 = new ActorTrait();
    pAsset39.id = "poisonous";
    pAsset39.path_icon = "ui/Icons/actor_traits/iconPoisonous";
    pAsset39.group_id = "body";
    pAsset39.rate_inherit = 5;
    this.add(pAsset39);
    ActorTrait pAsset40 = new ActorTrait();
    pAsset40.id = "venomous";
    pAsset40.path_icon = "ui/Icons/actor_traits/iconVenomous";
    pAsset40.group_id = "body";
    pAsset40.rate_inherit = 5;
    this.add(pAsset40);
    this.t.action_attack_target = new AttackAction(ActionLibrary.addPoisonedEffectOnTarget);
    ActorTrait pAsset41 = new ActorTrait();
    pAsset41.id = "poison_immune";
    pAsset41.path_icon = "ui/Icons/actor_traits/iconPoisonImmune";
    pAsset41.group_id = "protection";
    pAsset41.rate_inherit = 5;
    this.add(pAsset41);
    ActorTrait pAsset42 = new ActorTrait();
    pAsset42.id = "tough";
    pAsset42.path_icon = "ui/Icons/actor_traits/iconTough";
    pAsset42.rate_birth = 2;
    pAsset42.group_id = "physique";
    pAsset42.type = TraitType.Positive;
    pAsset42.same_trait_mod = -5;
    pAsset42.unlocked_with_achievement = true;
    pAsset42.achievement_id = "achievementDestroyWorldBox";
    this.add(pAsset42);
    this.t.base_stats["armor"] = 10f;
    this.t.base_stats["warfare"] = 1f;
    this.t.base_stats["lifespan"] = 4f;
    ActorTrait pAsset43 = new ActorTrait();
    pAsset43.id = "strong";
    pAsset43.rarity = Rarity.R0_Normal;
    pAsset43.path_icon = "ui/Icons/actor_traits/iconStrong";
    pAsset43.rate_birth = 4;
    pAsset43.opposite_trait_mod = -10;
    pAsset43.same_trait_mod = 5;
    pAsset43.group_id = "physique";
    pAsset43.type = TraitType.Positive;
    this.add(pAsset43);
    this.t.addOpposite("weak");
    this.t.base_stats["multiplier_damage"] = 0.5f;
    this.t.base_stats["warfare"] = 2f;
    this.t.base_stats["lifespan"] = 3f;
    ActorTrait pAsset44 = new ActorTrait();
    pAsset44.id = "weak";
    pAsset44.rarity = Rarity.R0_Normal;
    pAsset44.path_icon = "ui/Icons/actor_traits/iconWeak";
    pAsset44.rate_birth = 5;
    pAsset44.opposite_trait_mod = -10;
    pAsset44.group_id = "physique";
    pAsset44.type = TraitType.Negative;
    this.add(pAsset44);
    this.t.addOpposite("strong");
    this.t.base_stats["multiplier_damage"] = -0.5f;
    this.t.base_stats["warfare"] = -2f;
    this.t.base_stats["diplomacy"] = -2f;
    this.t.base_stats["lifespan"] = -6f;
  }

  private void addTraitsMind()
  {
    ActorTrait pAsset1 = new ActorTrait();
    pAsset1.id = "lustful";
    pAsset1.path_icon = "ui/Icons/actor_traits/iconLustful";
    pAsset1.group_id = "mind";
    pAsset1.rate_acquire_grow_up = 5;
    pAsset1.rate_birth = 1;
    pAsset1.likeability = 0.1f;
    this.add(pAsset1);
    this.t.base_stats["diplomacy"] = -2f;
    this.t.base_stats["multiplier_offspring"] = 0.2f;
    ActorTrait pAsset2 = new ActorTrait();
    pAsset2.id = "miner";
    pAsset2.path_icon = "ui/Icons/actor_traits/iconMiner";
    pAsset2.group_id = "miscellaneous";
    pAsset2.type = TraitType.Positive;
    pAsset2.rate_acquire_grow_up = 5;
    this.add(pAsset2);
    ActorTrait pAsset3 = new ActorTrait();
    pAsset3.id = "psychopath";
    pAsset3.path_icon = "ui/Icons/actor_traits/iconPsychopath";
    pAsset3.group_id = "mind";
    pAsset3.rate_birth = 1;
    pAsset3.type = TraitType.Negative;
    this.add(pAsset3);
    ActorTrait pAsset4 = new ActorTrait();
    pAsset4.id = "strong_minded";
    pAsset4.path_icon = "ui/Icons/actor_traits/iconStrongMinded";
    pAsset4.group_id = "mind";
    pAsset4.type = TraitType.Positive;
    pAsset4.remove_for_zombie_actor_asset = true;
    this.add(pAsset4);
    this.t.base_stats.addTag("strong_mind");
    this.t.addOpposite("madness");
    this.t.addOpposite("desire_golden_egg");
    this.t.addOpposite("desire_harp");
    ActorTrait pAsset5 = new ActorTrait();
    pAsset5.id = "peaceful";
    pAsset5.rarity = Rarity.R0_Normal;
    pAsset5.path_icon = "ui/Icons/actor_traits/iconPeaceful";
    pAsset5.remove_for_zombie_actor_asset = true;
    pAsset5.group_id = "mind";
    pAsset5.type = TraitType.Positive;
    this.add(pAsset5);
    this.t.base_stats.addTag("love_peace");
    ActorTrait pAsset6 = new ActorTrait();
    pAsset6.id = "evil";
    pAsset6.path_icon = "ui/Icons/actor_traits/iconEvil";
    pAsset6.group_id = "mind";
    pAsset6.likeability = -0.2f;
    this.add(pAsset6);
    this.t.addOpposite("blessed");
    this.t.base_stats["cities"] = -2f;
    this.t.base_stats["warfare"] = 10f;
    ActorTrait pAsset7 = new ActorTrait();
    pAsset7.id = "hotheaded";
    pAsset7.path_icon = "ui/Icons/actor_traits/iconHotheaded";
    pAsset7.rate_birth = 1;
    pAsset7.same_trait_mod = -10;
    pAsset7.group_id = "mind";
    pAsset7.type = TraitType.Negative;
    this.add(pAsset7);
    ActorTrait pAsset8 = new ActorTrait();
    pAsset8.id = "thief";
    pAsset8.path_icon = "ui/Icons/actor_traits/iconThief";
    pAsset8.rate_birth = 1;
    pAsset8.same_trait_mod = 10;
    pAsset8.group_id = "cognitive";
    pAsset8.type = TraitType.Negative;
    this.add(pAsset8);
    this.t.setUnlockedWithAchievement("achievementNotOnMyWatch");
    this.t.addOpposite("honest");
    this.t.addOpposite("content");
    this.t.base_stats.addTag("steal_items");
    this.t.addDecision("try_to_steal_money");
    ActorTrait pAsset9 = new ActorTrait();
    pAsset9.id = "stupid";
    pAsset9.rarity = Rarity.R0_Normal;
    pAsset9.path_icon = "ui/Icons/actor_traits/iconStupid";
    pAsset9.rate_birth = 3;
    pAsset9.same_trait_mod = 30;
    pAsset9.group_id = "cognitive";
    pAsset9.type = TraitType.Negative;
    this.add(pAsset9);
    this.t.addOpposite("genius");
    this.t.addOpposite("wise");
    this.t.base_stats["damage"] = 5f;
    this.t.base_stats["cities"] = -3f;
    this.t.base_stats["intelligence"] = -5f;
    this.t.base_stats["diplomacy"] = -2f;
    this.t.base_stats["warfare"] = -2f;
    this.t.base_stats["stewardship"] = -5f;
    this.t.base_stats["loyalty_traits"] = -15f;
    this.t.base_stats["personality_rationality"] = -0.5f;
    ActorTrait pAsset10 = new ActorTrait();
    pAsset10.id = "genius";
    pAsset10.path_icon = "ui/Icons/actor_traits/iconGenius";
    pAsset10.rate_birth = 1;
    pAsset10.remove_for_zombie_actor_asset = true;
    pAsset10.same_trait_mod = 20;
    pAsset10.opposite_trait_mod = -20;
    pAsset10.unlocked_with_achievement = true;
    pAsset10.achievement_id = "achievementTraitsExplorer60";
    pAsset10.group_id = "cognitive";
    pAsset10.type = TraitType.Positive;
    this.add(pAsset10);
    this.t.base_stats.addTag("can_read_any_book");
    this.t.addOpposite("stupid");
    this.t.base_stats["intelligence"] = 10f;
    this.t.base_stats["diplomacy"] = 5f;
    this.t.base_stats["warfare"] = 5f;
    this.t.base_stats["stewardship"] = 7f;
    this.t.base_stats["loyalty_traits"] = -10f;
    this.t.base_stats["cities"] = 3f;
    ActorTrait pAsset11 = new ActorTrait();
    pAsset11.id = "deceitful";
    pAsset11.rarity = Rarity.R0_Normal;
    pAsset11.path_icon = "ui/Icons/actor_traits/iconDeceitful";
    pAsset11.rate_acquire_grow_up = 5;
    pAsset11.same_trait_mod = -15;
    pAsset11.opposite_trait_mod = -5;
    pAsset11.likeability = 0.1f;
    pAsset11.group_id = "mind";
    pAsset11.type = TraitType.Negative;
    this.add(pAsset11);
    this.t.addOpposite("honest");
    this.t.base_stats["diplomacy"] = 1f;
    this.t.base_stats["stewardship"] = 4f;
    this.t.base_stats["loyalty_traits"] = -20f;
    ActorTrait pAsset12 = new ActorTrait();
    pAsset12.id = "ambitious";
    pAsset12.path_icon = "ui/Icons/actor_traits/iconAmbitious";
    pAsset12.rate_acquire_grow_up = 5;
    pAsset12.rate_birth = 1;
    pAsset12.same_trait_mod = -10;
    pAsset12.group_id = "mind";
    pAsset12.achievement_id = "achievement4RaceCities";
    pAsset12.unlocked_with_achievement = true;
    this.add(pAsset12);
    this.t.addOpposite("content");
    this.t.base_stats["diplomacy"] = 2f;
    this.t.base_stats["warfare"] = 4f;
    this.t.base_stats["stewardship"] = 1f;
    this.t.base_stats["loyalty_traits"] = -15f;
    this.t.base_stats["cities"] = 5f;
    ActorTrait pAsset13 = new ActorTrait();
    pAsset13.id = "content";
    pAsset13.rarity = Rarity.R0_Normal;
    pAsset13.path_icon = "ui/Icons/actor_traits/iconContent";
    pAsset13.rate_acquire_grow_up = 5;
    pAsset13.rate_birth = 2;
    pAsset13.same_trait_mod = 15;
    pAsset13.likeability = 0.1f;
    pAsset13.group_id = "mind";
    pAsset13.type = TraitType.Positive;
    this.add(pAsset13);
    this.t.addOpposite("ambitious");
    this.t.addOpposite("greedy");
    this.t.addOpposite("thief");
    this.t.base_stats["multiplier_supply_timer"] = -0.3f;
    this.t.base_stats["loyalty_traits"] = 10f;
    this.t.base_stats["diplomacy"] = 2f;
    this.t.base_stats["stewardship"] = 2f;
    this.t.base_stats["warfare"] = -2f;
    ActorTrait pAsset14 = new ActorTrait();
    pAsset14.id = "honest";
    pAsset14.rarity = Rarity.R0_Normal;
    pAsset14.path_icon = "ui/Icons/actor_traits/iconHonest";
    pAsset14.rate_acquire_grow_up = 5;
    pAsset14.rate_birth = 2;
    pAsset14.same_trait_mod = 10;
    pAsset14.opposite_trait_mod = -10;
    pAsset14.likeability = -0.1f;
    pAsset14.group_id = "mind";
    pAsset14.type = TraitType.Positive;
    this.add(pAsset14);
    this.t.addOpposite("deceitful");
    this.t.addOpposite("thief");
    this.t.base_stats["stewardship"] = 3f;
    this.t.base_stats["diplomacy"] = 2f;
    this.t.base_stats["warfare"] = -2f;
    this.t.base_stats["loyalty_traits"] = 5f;
    ActorTrait pAsset15 = new ActorTrait();
    pAsset15.id = "paranoid";
    pAsset15.path_icon = "ui/Icons/actor_traits/iconParanoid";
    pAsset15.rate_acquire_grow_up = 5;
    pAsset15.rate_birth = 1;
    pAsset15.group_id = "mind";
    pAsset15.type = TraitType.Negative;
    this.add(pAsset15);
    this.t.base_stats["diplomacy"] = -2f;
    this.t.base_stats["warfare"] = 4f;
    this.t.base_stats["multiplier_supply_timer"] = 0.5f;
    this.t.base_stats["loyalty_traits"] = -15f;
    this.t.base_stats["cities"] = -1f;
    ActorTrait pAsset16 = new ActorTrait();
    pAsset16.id = "greedy";
    pAsset16.path_icon = "ui/Icons/actor_traits/iconGreedy";
    pAsset16.rate_acquire_grow_up = 5;
    pAsset16.rate_birth = 1;
    pAsset16.likeability = -0.1f;
    pAsset16.group_id = "mind";
    pAsset16.type = TraitType.Negative;
    this.add(pAsset16);
    this.t.addOpposite("content");
    this.t.base_stats["diplomacy"] = -2f;
    this.t.base_stats["stewardship"] = -3f;
    this.t.base_stats["warfare"] = 4f;
    this.t.base_stats["multiplier_supply_timer"] = 4f;
    this.t.base_stats["loyalty_traits"] = -5f;
    this.t.base_stats["cities"] = 2f;
  }

  private void addTraitsSpirit()
  {
    ActorTrait pAsset1 = new ActorTrait();
    pAsset1.id = "chosen_one";
    pAsset1.path_icon = "ui/Icons/actor_traits/iconChosenOne";
    pAsset1.likeability = 0.25f;
    pAsset1.group_id = "fate";
    pAsset1.achievement_id = "achievementLavaStrike";
    pAsset1.unlocked_with_achievement = true;
    this.add(pAsset1);
    this.t.is_mutation_box_allowed = false;
    this.t.base_stats["stamina"] = 1000f;
    this.t.base_stats["mana"] = 1000f;
    this.t.addCombatAction("combat_backstep");
    this.t.addCombatAction("combat_block");
    this.t.addCombatAction("combat_dash");
    this.t.addCombatAction("combat_deflect_projectile");
    this.t.addCombatAction("combat_dodge");
    this.t.addSpell("cast_fire");
    this.t.addSpell("summon_lightning");
    this.t.addSpell("summon_tornado");
    this.t.addSpell("cast_blood_rain");
    this.t.addSpell("cast_blood_rain");
    this.t.addSpell("cast_cure");
    this.t.addSpell("cast_shield");
    this.t.addSpell("cast_grass_seeds");
    this.t.addSpell("spawn_vegetation");
    this.t.addSpell("cast_curse");
    ActorTrait t1 = this.t;
    t1.action_death = t1.action_death + new WorldAction(ActionLibrary.mageSlayerCheck);
    ActorTrait pAsset2 = new ActorTrait();
    pAsset2.id = "moonchild";
    pAsset2.path_icon = "ui/Icons/actor_traits/iconMoonchild";
    pAsset2.only_active_on_era_flag = true;
    pAsset2.era_active_moon = true;
    pAsset2.group_id = "spirit";
    pAsset2.rate_inherit = 5;
    pAsset2.rate_birth = 1;
    this.add(pAsset2);
    this.t.base_stats["multiplier_damage"] = 0.5f;
    this.t.base_stats["multiplier_speed"] = 0.1f;
    this.t.base_stats["armor"] = 1f;
    this.t.base_stats["intelligence"] = 3f;
    ActorTrait pAsset3 = new ActorTrait();
    pAsset3.id = "nightchild";
    pAsset3.path_icon = "ui/Icons/actor_traits/iconNightchild";
    pAsset3.only_active_on_era_flag = true;
    pAsset3.era_active_night = true;
    pAsset3.group_id = "spirit";
    pAsset3.rate_inherit = 5;
    pAsset3.rate_birth = 1;
    this.add(pAsset3);
    this.t.base_stats["multiplier_damage"] = 0.5f;
    this.t.base_stats["multiplier_speed"] = 0.1f;
    this.t.base_stats["critical_chance"] = 0.03f;
    this.t.base_stats["warfare"] = 3f;
    ActorTrait pAsset4 = new ActorTrait();
    pAsset4.id = "flesh_eater";
    pAsset4.path_icon = "ui/Icons/actor_traits/iconFleshEater";
    pAsset4.group_id = "spirit";
    pAsset4.rate_inherit = 5;
    pAsset4.rate_birth = 1;
    this.add(pAsset4);
    this.t.action_attack_target = new AttackAction(ActionLibrary.restoreHealthOnHit);
    ActorTrait pAsset5 = new ActorTrait();
    pAsset5.id = "titan_lungs";
    pAsset5.path_icon = "ui/Icons/actor_traits/iconTitanLungs";
    pAsset5.group_id = "body";
    pAsset5.rate_inherit = 5;
    this.add(pAsset5);
    this.t.setUnlockedWithAchievement("achievementNinjaTurtle");
    this.t.base_stats["multiplier_stamina"] = 10f;
    ActorTrait pAsset6 = new ActorTrait();
    pAsset6.id = "heart_of_wizard";
    pAsset6.path_icon = "ui/Icons/actor_traits/iconHeartWizard";
    pAsset6.group_id = "spirit";
    pAsset6.rate_inherit = 5;
    this.add(pAsset6);
    this.t.base_stats["multiplier_mana"] = 10f;
    ActorTrait pAsset7 = new ActorTrait();
    pAsset7.id = "battle_reflexes";
    pAsset7.path_icon = "ui/Icons/actor_traits/iconBattleReflexes";
    pAsset7.group_id = "mind";
    pAsset7.rate_inherit = 5;
    this.add(pAsset7);
    this.t.base_stats["skill_combat"] = 0.5f;
    ActorTrait pAsset8 = new ActorTrait();
    pAsset8.id = "arcane_reflexes";
    pAsset8.path_icon = "ui/Icons/actor_traits/iconArcaneReflexes";
    pAsset8.group_id = "mind";
    pAsset8.rate_inherit = 5;
    this.add(pAsset8);
    this.t.base_stats["skill_spell"] = 0.5f;
    ActorTrait pAsset9 = new ActorTrait();
    pAsset9.id = "healing_aura";
    pAsset9.path_icon = "ui/Icons/actor_traits/iconHealingAura";
    pAsset9.group_id = "spirit";
    pAsset9.rate_inherit = 5;
    pAsset9.special_effect_interval = 2f;
    pAsset9.likeability = 0.1f;
    this.add(pAsset9);
    ActorTrait t2 = this.t;
    t2.action_special_effect = t2.action_special_effect + new WorldAction(ActionLibrary.healingAuraEffect);
    ActorTrait pAsset10 = new ActorTrait();
    pAsset10.id = "savage";
    pAsset10.path_icon = "ui/Icons/actor_traits/iconSavage";
    pAsset10.group_id = "spirit";
    pAsset10.type = TraitType.Positive;
    pAsset10.same_trait_mod = 5;
    pAsset10.rate_acquire_grow_up = 2;
    pAsset10.rate_inherit = 5;
    this.add(pAsset10);
    ActorTrait pAsset11 = new ActorTrait();
    pAsset11.id = "immortal";
    pAsset11.path_icon = "ui/Icons/actor_traits/iconImmortal";
    pAsset11.same_trait_mod = -20;
    pAsset11.type = TraitType.Positive;
    pAsset11.unlocked_with_achievement = true;
    pAsset11.achievement_id = "achievementTheKing";
    pAsset11.group_id = "health";
    this.add(pAsset11);
    this.t.addOpposite("plague");
    this.t.addOpposite("boat");
    this.t.base_stats["loyalty_traits"] = -20f;
    ActorTrait pAsset12 = new ActorTrait();
    pAsset12.id = "burning_feet";
    pAsset12.path_icon = "ui/Icons/actor_traits/iconBurningFeet";
    pAsset12.unlocked_with_achievement = true;
    pAsset12.achievement_id = "achievementTheHell";
    pAsset12.group_id = "spirit";
    pAsset12.rate_inherit = 3;
    this.add(pAsset12);
    ActorTrait t3 = this.t;
    t3.action_special_effect = t3.action_special_effect + new WorldAction(ActionLibrary.burningFeetEffect);
    ActorTrait pAsset13 = new ActorTrait();
    pAsset13.id = "cold_aura";
    pAsset13.path_icon = "ui/Icons/actor_traits/iconColdAura";
    pAsset13.group_id = "spirit";
    pAsset13.rate_inherit = 3;
    this.add(pAsset13);
    ActorTrait t4 = this.t;
    t4.action_special_effect = t4.action_special_effect + new WorldAction(ActionLibrary.coldAuraEffect);
    ActorTrait pAsset14 = new ActorTrait();
    pAsset14.id = "lucky";
    pAsset14.path_icon = "ui/Icons/actor_traits/iconLucky";
    pAsset14.rate_birth = 2;
    pAsset14.rate_inherit = 5;
    pAsset14.likeability = 0.1f;
    pAsset14.group_id = "spirit";
    pAsset14.type = TraitType.Positive;
    this.add(pAsset14);
    this.t.addOpposite("unlucky");
    this.t.base_stats["lifespan"] = 7f;
    this.t.base_stats["accuracy"] = 4f;
    this.t.base_stats["critical_chance"] = 0.3f;
    this.t.base_stats["birth_rate"] = 5f;
    ActorTrait pAsset15 = new ActorTrait();
    pAsset15.id = "unlucky";
    pAsset15.path_icon = "ui/Icons/actor_traits/iconUnlucky";
    pAsset15.rate_birth = 3;
    pAsset15.rate_inherit = 5;
    pAsset15.likeability = -0.1f;
    pAsset15.special_effect_interval = 20f;
    pAsset15.group_id = "spirit";
    pAsset15.type = TraitType.Negative;
    this.add(pAsset15);
    this.t.addOpposite("lucky");
    this.t.base_stats["lifespan"] = -13f;
    ActorTrait t5 = this.t;
    t5.action_special_effect = t5.action_special_effect + new WorldAction(ActionLibrary.unluckyFall);
    this.t.base_stats["accuracy"] = -4f;
    this.t.base_stats["critical_chance"] = -0.3f;
    ActorTrait pAsset16 = new ActorTrait();
    pAsset16.id = "bloodlust";
    pAsset16.path_icon = "ui/Icons/actor_traits/iconBloodlust";
    pAsset16.rate_acquire_grow_up = 4;
    pAsset16.rate_birth = 1;
    pAsset16.rate_inherit = 5;
    pAsset16.group_id = "spirit";
    pAsset16.type = TraitType.Negative;
    pAsset16.unlocked_with_achievement = true;
    pAsset16.achievement_id = "achievementTheDemon";
    this.add(pAsset16);
    this.t.addOpposite("pacifist");
    this.t.base_stats["multiplier_supply_timer"] = 1.5f;
    this.t.base_stats["loyalty_traits"] = -20f;
    this.t.base_stats["warfare"] = 5f;
    this.t.base_stats["diplomacy"] = -2f;
    this.t.base_stats["cities"] = 3f;
    ActorTrait pAsset17 = new ActorTrait();
    pAsset17.id = "pacifist";
    pAsset17.path_icon = "ui/Icons/actor_traits/iconPacifist";
    pAsset17.rate_acquire_grow_up = 3;
    pAsset17.rate_inherit = 5;
    pAsset17.likeability = 0.1f;
    pAsset17.group_id = "spirit";
    pAsset17.type = TraitType.Positive;
    this.add(pAsset17);
    this.t.addOpposite("bloodlust");
    this.t.base_stats["multiplier_supply_timer"] = -0.1f;
    this.t.base_stats["loyalty_traits"] = 50f;
    this.t.base_stats["diplomacy"] = 10f;
    this.t.base_stats["warfare"] = -4f;
  }

  private void addTraitsAcquired()
  {
    ActorTrait pAsset1 = new ActorTrait();
    pAsset1.id = "veteran";
    pAsset1.path_icon = "ui/Icons/actor_traits/iconVeteran";
    pAsset1.group_id = "merits";
    pAsset1.type = TraitType.Positive;
    pAsset1.same_trait_mod = 5;
    pAsset1.is_mutation_box_allowed = false;
    this.add(pAsset1);
    this.t.base_stats["skill_combat"] = 0.1f;
    this.t.base_stats["multiplier_damage"] = 0.1f;
    this.t.base_stats["multiplier_health"] = 0.1f;
    ActorTrait pAsset2 = new ActorTrait();
    pAsset2.id = "wise";
    pAsset2.path_icon = "ui/Icons/actor_traits/iconWise";
    pAsset2.group_id = "cognitive";
    pAsset2.type = TraitType.Positive;
    pAsset2.is_mutation_box_allowed = false;
    this.add(pAsset2);
    this.t.addOpposite("stupid");
    this.t.addOpposite("boat");
    this.t.base_stats["diplomacy"] = 1f;
    this.t.base_stats["stewardship"] = 1f;
    this.t.base_stats["warfare"] = 1f;
    this.t.base_stats["intelligence"] = 1f;
    ActorTrait pAsset3 = new ActorTrait();
    pAsset3.id = "infected";
    pAsset3.path_icon = "ui/Icons/actor_traits/iconInfected";
    pAsset3.rate_inherit = 20;
    pAsset3.group_id = "acquired";
    pAsset3.can_be_removed_by_divine_light = true;
    pAsset3.can_be_removed_by_accelerated_healing = true;
    pAsset3.is_mutation_box_allowed = false;
    this.add(pAsset3);
    this.t.addOpposite("immune");
    this.t.addOpposite("boat");
    this.t.can_be_cured = true;
    ActorTrait t1 = this.t;
    t1.action_special_effect = t1.action_special_effect + new WorldAction(ActionLibrary.infectedEffect);
    this.t.special_effect_interval = 1.5f;
    ActorTrait t2 = this.t;
    t2.action_death = t2.action_death + new WorldAction(ActionLibrary.turnIntoZombie);
    this.t.base_stats["multiplier_speed"] = 0.1f;
    this.t.base_stats["loyalty_traits"] = -15f;
    ActorTrait pAsset4 = new ActorTrait();
    pAsset4.id = "mush_spores";
    pAsset4.path_icon = "ui/Icons/actor_traits/iconMushSpores";
    pAsset4.rate_inherit = 30;
    pAsset4.can_be_removed_by_divine_light = true;
    pAsset4.can_be_removed_by_accelerated_healing = true;
    pAsset4.group_id = "acquired";
    pAsset4.is_mutation_box_allowed = false;
    this.add(pAsset4);
    this.t.addOpposite("immune");
    this.t.addOpposite("boat");
    this.t.can_be_cured = true;
    ActorTrait t3 = this.t;
    t3.action_death = t3.action_death + new WorldAction(ActionLibrary.mushSporesEffect);
    ActorTrait t4 = this.t;
    t4.action_death = t4.action_death + new WorldAction(ActionLibrary.turnIntoMush);
    this.t.base_stats["multiplier_speed"] = 0.3f;
    this.t.base_stats["loyalty_traits"] = -15f;
    ActorTrait pAsset5 = new ActorTrait();
    pAsset5.id = "tumor_infection";
    pAsset5.path_icon = "ui/Icons/actor_traits/iconTumorInfection";
    pAsset5.rate_inherit = 30;
    pAsset5.can_be_removed_by_divine_light = true;
    pAsset5.can_be_removed_by_accelerated_healing = true;
    pAsset5.group_id = "acquired";
    pAsset5.is_mutation_box_allowed = false;
    this.add(pAsset5);
    this.t.addOpposite("immune");
    this.t.addOpposite("boat");
    this.t.can_be_cured = true;
    ActorTrait t5 = this.t;
    t5.action_special_effect = t5.action_special_effect + new WorldAction(ActionLibrary.tumorEffect);
    ActorTrait t6 = this.t;
    t6.action_death = t6.action_death + new WorldAction(ActionLibrary.turnIntoTumorMonster);
    this.t.base_stats["multiplier_speed"] = 0.3f;
    this.t.base_stats["loyalty_traits"] = -15f;
    ActorTrait pAsset6 = new ActorTrait();
    pAsset6.id = "plague";
    pAsset6.path_icon = "ui/Icons/actor_traits/iconPlague";
    pAsset6.rate_inherit = 30;
    pAsset6.unlocked_with_achievement = true;
    pAsset6.achievement_id = "achievementGreatPlague";
    pAsset6.can_be_removed_by_divine_light = true;
    pAsset6.can_be_removed_by_accelerated_healing = true;
    pAsset6.group_id = "acquired";
    pAsset6.is_mutation_box_allowed = false;
    this.add(pAsset6);
    this.t.addOpposite("immune");
    this.t.addOpposite("immortal");
    this.t.addOpposite("contagious");
    this.t.addOpposite("boat");
    this.t.can_be_cured = true;
    ActorTrait t7 = this.t;
    t7.action_special_effect = t7.action_special_effect + new WorldAction(ActionLibrary.plagueEffect);
    this.t.base_stats["multiplier_speed"] = -0.3f;
    this.t.base_stats["multiplier_damage"] = -0.5f;
    this.t.base_stats["stamina"] = -10f;
    this.t.base_stats["armor"] = -2f;
    this.t.base_stats["loyalty_traits"] = -15f;
    this.t.base_stats["lifespan"] = -30f;
    ActorTrait pAsset7 = new ActorTrait();
    pAsset7.id = "blessed";
    pAsset7.likeability = 0.1f;
    pAsset7.path_icon = "ui/Icons/actor_traits/iconBlessing";
    pAsset7.group_id = "acquired";
    pAsset7.is_mutation_box_allowed = false;
    this.add(pAsset7);
    this.t.addOpposite("evil");
    this.t.base_stats["multiplier_damage"] = 0.5f;
    this.t.base_stats["multiplier_health"] = 0.5f;
    this.t.base_stats["multiplier_speed"] = 0.5f;
    this.t.base_stats["multiplier_diplomacy"] = 0.2f;
    this.t.base_stats["multiplier_crit"] = 0.1f;
    this.t.base_stats["lifespan"] = 5f;
    ActorTrait pAsset8 = new ActorTrait();
    pAsset8.id = "kingslayer";
    pAsset8.path_icon = "ui/Icons/actor_traits/iconKingslayer";
    pAsset8.group_id = "merits";
    pAsset8.is_mutation_box_allowed = false;
    this.add(pAsset8);
    this.t.base_stats["multiplier_supply_timer"] = 2f;
    this.t.base_stats["loyalty_traits"] = -25f;
    this.t.base_stats["diplomacy"] = -5f;
    this.t.base_stats["warfare"] = 5f;
    ActorTrait pAsset9 = new ActorTrait();
    pAsset9.id = "mageslayer";
    pAsset9.group_id = "merits";
    pAsset9.path_icon = "ui/Icons/actor_traits/iconMageslayer";
    pAsset9.is_mutation_box_allowed = false;
    this.add(pAsset9);
    this.t.base_stats["loyalty_traits"] = -10f;
    this.t.base_stats["warfare"] = 5f;
    this.t.base_stats["critical_chance"] = 0.03f;
    ActorTrait pAsset10 = new ActorTrait();
    pAsset10.id = "dragonslayer";
    pAsset10.group_id = "merits";
    pAsset10.path_icon = "ui/Icons/actor_traits/iconDragonslayer";
    pAsset10.is_mutation_box_allowed = false;
    this.add(pAsset10);
    this.t.base_stats["warfare"] = 5f;
    this.t.base_stats["critical_chance"] = 0.04f;
    this.t.base_stats["multiplier_diplomacy"] = 0.1f;
    ActorTrait pAsset11 = new ActorTrait();
    pAsset11.id = "crippled";
    pAsset11.path_icon = "ui/Icons/actor_traits/iconCrippled";
    pAsset11.same_trait_mod = 10;
    pAsset11.can_be_removed_by_divine_light = true;
    pAsset11.can_be_removed_by_accelerated_healing = true;
    pAsset11.type = TraitType.Negative;
    pAsset11.group_id = "acquired";
    pAsset11.is_mutation_box_allowed = false;
    this.add(pAsset11);
    this.t.base_stats["multiplier_speed"] = -0.5f;
    this.t.base_stats["diplomacy"] = -3f;
    this.t.base_stats["multiplier_offspring"] = -0.5f;
    ActorTrait pAsset12 = new ActorTrait();
    pAsset12.id = "golden_tooth";
    pAsset12.path_icon = "ui/Icons/actor_traits/iconGoldenTooth";
    pAsset12.same_trait_mod = 5;
    pAsset12.type = TraitType.Positive;
    pAsset12.group_id = "appearance";
    pAsset12.is_mutation_box_allowed = false;
    this.add(pAsset12);
    this.t.base_stats["diplomacy"] = 2f;
    ActorTrait pAsset13 = new ActorTrait();
    pAsset13.id = "eyepatch";
    pAsset13.path_icon = "ui/Icons/actor_traits/iconEyePatch";
    pAsset13.same_trait_mod = 20;
    pAsset13.can_be_removed_by_divine_light = true;
    pAsset13.can_be_removed_by_accelerated_healing = true;
    pAsset13.type = TraitType.Negative;
    pAsset13.group_id = "appearance";
    pAsset13.is_mutation_box_allowed = false;
    this.add(pAsset13);
    this.t.base_stats["accuracy"] = -5f;
    this.t.base_stats["diplomacy"] = 1f;
    this.t.base_stats["warfare"] = -1f;
    this.t.base_stats["critical_chance"] = -0.15f;
    ActorTrait pAsset14 = new ActorTrait();
    pAsset14.id = "skin_burns";
    pAsset14.path_icon = "ui/Icons/actor_traits/iconSkinBurns";
    pAsset14.same_trait_mod = 40;
    pAsset14.can_be_removed_by_divine_light = true;
    pAsset14.can_be_removed_by_accelerated_healing = true;
    pAsset14.type = TraitType.Negative;
    pAsset14.group_id = "appearance";
    pAsset14.is_mutation_box_allowed = false;
    this.add(pAsset14);
    this.t.base_stats["diplomacy"] = -2f;
    this.t.base_stats["warfare"] = 2f;
    this.t.base_stats["multiplier_speed"] = -0.25f;
    this.t.base_stats["lifespan"] = -5f;
  }

  private void addTraitsFun()
  {
    ActorTrait pAsset1 = new ActorTrait();
    pAsset1.id = "super_health";
    pAsset1.path_icon = "ui/Icons/actor_traits/iconSuperHealth";
    pAsset1.unlocked_with_achievement = true;
    pAsset1.achievement_id = "achievementTraitsExplorer90";
    pAsset1.group_id = "health";
    pAsset1.rate_inherit = 3;
    this.add(pAsset1);
    this.t.base_stats["lifespan"] = 100f;
    this.t.base_stats["multiplier_health"] = 100f;
    ActorTrait pAsset2 = new ActorTrait();
    pAsset2.id = "death_nuke";
    pAsset2.path_icon = "ui/Icons/actor_traits/iconDeathNuke";
    pAsset2.unlocked_with_achievement = true;
    pAsset2.achievement_id = "achievementFinalResolution";
    pAsset2.group_id = "fun";
    pAsset2.rate_inherit = 1;
    pAsset2.is_mutation_box_allowed = false;
    this.add(pAsset2);
    this.t.addOpposite("death_bomb");
    ActorTrait t1 = this.t;
    t1.action_death = t1.action_death + new WorldAction(ActionLibrary.deathNuke);
    ActorTrait pAsset3 = new ActorTrait();
    pAsset3.id = "death_bomb";
    pAsset3.path_icon = "ui/Icons/actor_traits/iconDeathBomb";
    pAsset3.unlocked_with_achievement = true;
    pAsset3.achievement_id = "achievementManyBombs";
    pAsset3.group_id = "fun";
    pAsset3.rate_inherit = 1;
    this.add(pAsset3);
    this.t.addOpposite("death_nuke");
    ActorTrait t2 = this.t;
    t2.action_death = t2.action_death + new WorldAction(ActionLibrary.deathBomb);
    ActorTrait pAsset4 = new ActorTrait();
    pAsset4.id = "death_mark";
    pAsset4.path_icon = "ui/Icons/actor_traits/iconDeathMark";
    pAsset4.unlocked_with_achievement = true;
    pAsset4.achievement_id = "achievementTraitsExplorer40";
    pAsset4.group_id = "fate";
    pAsset4.is_mutation_box_allowed = false;
    this.add(pAsset4);
    ActorTrait t3 = this.t;
    t3.action_special_effect = t3.action_special_effect + new WorldAction(ActionLibrary.deathMark);
    ActorTrait pAsset5 = new ActorTrait();
    pAsset5.id = "energized";
    pAsset5.path_icon = "ui/Icons/actor_traits/iconLightning";
    pAsset5.group_id = "fun";
    pAsset5.spawn_random_trait_allowed = false;
    this.add(pAsset5);
    this.t.addOpposite("boat");
    this.t.base_stats["multiplier_speed"] = 2f;
    this.t.base_stats["lifespan"] = 7f;
    ActorTrait t4 = this.t;
    t4.action_death = t4.action_death + new WorldAction(ActionLibrary.energizedLightning);
    ActorTrait pAsset6 = new ActorTrait();
    pAsset6.id = "mega_heartbeat";
    pAsset6.path_icon = "ui/Icons/actor_traits/iconMegaHeartbeat";
    pAsset6.group_id = "fun";
    pAsset6.rate_inherit = 4;
    pAsset6.unlocked_with_achievement = true;
    pAsset6.achievement_id = "achievementPrintHeart";
    pAsset6.special_effect_interval = 5f;
    pAsset6.likeability = 0.1f;
    pAsset6.spawn_random_trait_allowed = false;
    pAsset6.is_mutation_box_allowed = false;
    this.add(pAsset6);
    this.t.addOpposite("whirlwind");
    ActorTrait t5 = this.t;
    t5.action_special_effect = t5.action_special_effect + new WorldAction(ActionLibrary.megaHeartbeat);
    ActorTrait pAsset7 = new ActorTrait();
    pAsset7.id = "bomberman";
    pAsset7.path_icon = "ui/Icons/actor_traits/iconGrenade";
    pAsset7.group_id = "fun";
    this.add(pAsset7);
    this.t.addCombatAction("combat_throw_bomb");
    ActorTrait pAsset8 = new ActorTrait();
    pAsset8.id = "pyromaniac";
    pAsset8.path_icon = "ui/Icons/actor_traits/iconPyromaniac";
    pAsset8.rate_acquire_grow_up = 1;
    pAsset8.achievement_id = "achievementWorldWar";
    pAsset8.unlocked_with_achievement = true;
    pAsset8.group_id = "mind";
    pAsset8.acquire_grow_up_sapient_only = true;
    pAsset8.rate_inherit = 1;
    this.add(pAsset8);
    this.t.addCombatAction("combat_throw_torch");
    ActorTrait pAsset9 = new ActorTrait();
    pAsset9.id = "whirlwind";
    pAsset9.path_icon = "ui/Icons/iconTornado";
    pAsset9.group_id = "fun";
    pAsset9.action_special_effect = new WorldAction(ActionLibrary.whirlwind);
    pAsset9.special_effect_interval = 0.1f;
    pAsset9.unlocked_with_achievement = true;
    pAsset9.spawn_random_trait_allowed = false;
    pAsset9.is_mutation_box_allowed = false;
    pAsset9.achievement_id = "achievementRainTornado";
    this.add(pAsset9);
    this.t.addOpposite("mega_heartbeat");
  }

  private void addTraitsMisc()
  {
    ActorTrait pAsset1 = new ActorTrait();
    pAsset1.id = "light_lamp";
    pAsset1.path_icon = "ui/Icons/actor_traits/iconLightLamp";
    pAsset1.group_id = "miscellaneous";
    this.add(pAsset1);
    this.t.base_stats.addTag("generate_light");
    ActorTrait pAsset2 = new ActorTrait();
    pAsset2.id = "shiny";
    pAsset2.path_icon = "ui/Icons/actor_traits/iconShiny";
    pAsset2.group_id = "miscellaneous";
    pAsset2.rate_inherit = 10;
    this.add(pAsset2);
    this.t.base_stats["diplomacy"] = 5f;
    this.t.action_special_effect = new WorldAction(ActionLibrary.shiny);
    ActorTrait pAsset3 = new ActorTrait();
    pAsset3.id = "flower_prints";
    pAsset3.path_icon = "ui/Icons/actor_traits/iconFlowerPrints";
    pAsset3.unlocked_with_achievement = true;
    pAsset3.achievement_id = "achievementTouchTheGrass";
    pAsset3.group_id = "miscellaneous";
    pAsset3.rate_inherit = 10;
    this.add(pAsset3);
    ActorTrait t = this.t;
    t.action_special_effect = t.action_special_effect + new WorldAction(ActionLibrary.flowerPrintsEffect);
  }

  private void addTraitsSpecial()
  {
    ActorTrait pAsset1 = new ActorTrait();
    pAsset1.id = "metamorphed";
    pAsset1.rarity = Rarity.R0_Normal;
    pAsset1.path_icon = "ui/Icons/actor_traits/iconMetamorphed";
    pAsset1.can_be_given = false;
    pAsset1.group_id = "special";
    pAsset1.is_mutation_box_allowed = false;
    this.add(pAsset1);
    ActorTrait pAsset2 = new ActorTrait();
    pAsset2.id = "clone";
    pAsset2.rarity = Rarity.R0_Normal;
    pAsset2.path_icon = "ui/Icons/actor_traits/iconClone";
    pAsset2.can_be_given = false;
    pAsset2.group_id = "special";
    pAsset2.is_mutation_box_allowed = false;
    this.add(pAsset2);
    ActorTrait pAsset3 = new ActorTrait();
    pAsset3.id = "boat";
    pAsset3.path_icon = "ui/Icons/iconBoat";
    pAsset3.can_be_given = false;
    pAsset3.group_id = "special";
    pAsset3.is_mutation_box_allowed = false;
    this.add(pAsset3);
    this.t.addOpposite("infected");
    this.t.addOpposite("tumor_infection");
    this.t.addOpposite("mush_spores");
    this.t.addOpposite("plague");
    this.t.addOpposite("immortal");
    this.t.addOpposite("energized");
    this.t.addOpposite("wise");
    ActorTrait pAsset4 = new ActorTrait();
    pAsset4.id = "scar_of_divinity";
    pAsset4.path_icon = "ui/Icons/actor_traits/iconDivineScar";
    pAsset4.can_be_removed = false;
    pAsset4.can_be_given = false;
    pAsset4.rate_inherit = 0;
    pAsset4.group_id = "special";
    pAsset4.is_mutation_box_allowed = false;
    this.add(pAsset4);
    ActorTrait pAsset5 = new ActorTrait();
    pAsset5.id = "miracle_born";
    pAsset5.path_icon = "ui/Icons/actor_traits/iconMiracleBorn";
    pAsset5.group_id = "special";
    pAsset5.can_be_given = false;
    pAsset5.can_be_removed = false;
    pAsset5.is_mutation_box_allowed = false;
    this.add(pAsset5);
    this.t.base_stats["lifespan"] = 20f;
    this.t.base_stats["multiplier_offspring"] = 2f;
    this.t.base_stats["birth_rate"] = 2f;
    ActorTrait pAsset6 = new ActorTrait();
    pAsset6.id = "miracle_bearer";
    pAsset6.path_icon = "ui/Icons/actor_traits/iconMiracleBearer";
    pAsset6.group_id = "special";
    pAsset6.can_be_given = false;
    pAsset6.can_be_removed = false;
    pAsset6.is_mutation_box_allowed = false;
    this.add(pAsset6);
    ActorTrait pAsset7 = new ActorTrait();
    pAsset7.id = "contagious";
    pAsset7.path_icon = "ui/Icons/iconRat";
    pAsset7.group_id = "miscellaneous";
    pAsset7.is_mutation_box_allowed = false;
    this.add(pAsset7);
    this.t.addOpposite("plague");
    ActorTrait t1 = this.t;
    t1.action_special_effect = t1.action_special_effect + new WorldAction(ActionLibrary.contagiousEffect);
    ActorTrait pAsset8 = new ActorTrait();
    pAsset8.id = "zombie";
    pAsset8.path_icon = "ui/Icons/iconZombie";
    pAsset8.can_be_given = false;
    pAsset8.group_id = "special";
    pAsset8.is_mutation_box_allowed = false;
    this.add(pAsset8);
    this.t.action_special_effect = new WorldAction(ActionLibrary.zombieEffect);
    this.t.action_attack_target = new AttackAction(ActionLibrary.zombieInfectAttack);
    ActorTrait pAsset9 = new ActorTrait();
    pAsset9.id = "madness";
    pAsset9.path_icon = "ui/Icons/actor_traits/iconMadness";
    pAsset9.group_id = "special";
    pAsset9.can_be_removed_by_divine_light = true;
    pAsset9.can_be_given = false;
    pAsset9.can_be_removed = false;
    pAsset9.is_kingdom_affected = true;
    pAsset9.affects_mind = true;
    pAsset9.forced_kingdom = "mad";
    pAsset9.likeability = -1f;
    pAsset9.is_mutation_box_allowed = false;
    this.add(pAsset9);
    ActorTrait t2 = this.t;
    t2.action_on_augmentation_add = t2.action_on_augmentation_add + new WorldActionTrait(ActionLibrary.forcedKingdomAdd);
    ActorTrait t3 = this.t;
    t3.action_on_augmentation_remove = t3.action_on_augmentation_remove + new WorldActionTrait(ActionLibrary.forcedKingdomEffectRemove);
    ActorTrait t4 = this.t;
    t4.action_on_augmentation_load = t4.action_on_augmentation_load + new WorldActionTrait(ActionLibrary.madnessEffectLoad);
    this.t.traits_to_remove_ids = new string[4]
    {
      "desire_alien_mold",
      "desire_computer",
      "desire_golden_egg",
      "desire_harp"
    };
    this.t.addOpposite("strong_minded");
    this.t.addOpposite("desire_alien_mold");
    this.t.addOpposite("desire_computer");
    this.t.addOpposite("desire_golden_egg");
    this.t.addOpposite("desire_harp");
    this.t.addDecision("madness_random_emotion");
    this.t.base_stats["multiplier_speed"] = 0.1f;
    this.t.base_stats["diplomacy"] = -100f;
    this.t.base_stats["loyalty_traits"] = -100f;
    ActorTrait pAsset10 = new ActorTrait();
    pAsset10.id = "desire_alien_mold";
    pAsset10.path_icon = "ui/Icons/actor_traits/iconWaypointAlienMoldDrop";
    pAsset10.group_id = "special";
    pAsset10.can_be_removed_by_divine_light = true;
    pAsset10.can_be_given = false;
    pAsset10.can_be_removed = false;
    pAsset10.is_kingdom_affected = true;
    pAsset10.affects_mind = true;
    pAsset10.forced_kingdom = "alien_mold";
    pAsset10.is_mutation_box_allowed = false;
    this.add(pAsset10);
    ActorTrait t5 = this.t;
    t5.action_on_augmentation_add = t5.action_on_augmentation_add + new WorldActionTrait(ActionLibrary.forcedKingdomAdd);
    ActorTrait t6 = this.t;
    t6.action_on_augmentation_remove = t6.action_on_augmentation_remove + new WorldActionTrait(ActionLibrary.forcedKingdomEffectRemove);
    ActorTrait t7 = this.t;
    t7.action_on_augmentation_load = t7.action_on_augmentation_load + new WorldActionTrait(ActionLibrary.madnessEffectLoad);
    this.t.addDecision("follow_desire_target");
    this.t.traits_to_remove_ids = new string[4]
    {
      "desire_computer",
      "desire_golden_egg",
      "desire_harp",
      "madness"
    };
    this.t.addOpposite("madness");
    this.t.addOpposite("desire_computer");
    this.t.addOpposite("desire_golden_egg");
    this.t.addOpposite("desire_harp");
    this.t.base_stats["targets"] = 1f;
    this.t.base_stats["multiplier_crit"] = 0.3f;
    this.t.base_stats["damage_range"] = 0.3f;
    this.t.base_stats["armor"] = 10f;
    ActorTrait pAsset11 = new ActorTrait();
    pAsset11.id = "desire_computer";
    pAsset11.path_icon = "ui/Icons/actor_traits/iconWaypointComputerDrop";
    pAsset11.group_id = "special";
    pAsset11.can_be_removed_by_divine_light = true;
    pAsset11.can_be_given = false;
    pAsset11.can_be_removed = false;
    pAsset11.is_kingdom_affected = true;
    pAsset11.affects_mind = true;
    pAsset11.forced_kingdom = "computer";
    pAsset11.is_mutation_box_allowed = false;
    this.add(pAsset11);
    ActorTrait t8 = this.t;
    t8.action_on_augmentation_add = t8.action_on_augmentation_add + new WorldActionTrait(ActionLibrary.forcedKingdomAdd);
    ActorTrait t9 = this.t;
    t9.action_on_augmentation_remove = t9.action_on_augmentation_remove + new WorldActionTrait(ActionLibrary.forcedKingdomEffectRemove);
    ActorTrait t10 = this.t;
    t10.action_on_augmentation_load = t10.action_on_augmentation_load + new WorldActionTrait(ActionLibrary.madnessEffectLoad);
    this.t.addDecision("follow_desire_target");
    this.t.traits_to_remove_ids = new string[4]
    {
      "desire_alien_mold",
      "desire_golden_egg",
      "desire_harp",
      "madness"
    };
    this.t.addOpposite("madness");
    this.t.addOpposite("desire_alien_mold");
    this.t.addOpposite("desire_golden_egg");
    this.t.addOpposite("desire_harp");
    this.t.base_stats["multiplier_health"] = 0.3f;
    this.t.base_stats["multiplier_lifespan"] = 0.5f;
    ActorTrait pAsset12 = new ActorTrait();
    pAsset12.id = "desire_golden_egg";
    pAsset12.path_icon = "ui/Icons/actor_traits/iconWaypointGoldenEggDrop";
    pAsset12.group_id = "special";
    pAsset12.can_be_removed_by_divine_light = true;
    pAsset12.can_be_given = false;
    pAsset12.can_be_removed = false;
    pAsset12.is_kingdom_affected = true;
    pAsset12.affects_mind = true;
    pAsset12.forced_kingdom = "golden_egg";
    pAsset12.is_mutation_box_allowed = false;
    this.add(pAsset12);
    ActorTrait t11 = this.t;
    t11.action_on_augmentation_add = t11.action_on_augmentation_add + new WorldActionTrait(ActionLibrary.forcedKingdomAdd);
    ActorTrait t12 = this.t;
    t12.action_on_augmentation_remove = t12.action_on_augmentation_remove + new WorldActionTrait(ActionLibrary.forcedKingdomEffectRemove);
    ActorTrait t13 = this.t;
    t13.action_on_augmentation_load = t13.action_on_augmentation_load + new WorldActionTrait(ActionLibrary.madnessEffectLoad);
    this.t.addDecision("follow_desire_target");
    this.t.traits_to_remove_ids = new string[4]
    {
      "desire_alien_mold",
      "desire_computer",
      "desire_harp",
      "madness"
    };
    this.t.addOpposite("strong_minded");
    this.t.addOpposite("madness");
    this.t.addOpposite("desire_alien_mold");
    this.t.addOpposite("desire_computer");
    this.t.addOpposite("desire_harp");
    this.t.base_stats["multiplier_damage"] = 0.5f;
    ActorTrait pAsset13 = new ActorTrait();
    pAsset13.id = "desire_harp";
    pAsset13.path_icon = "ui/Icons/actor_traits/iconWaypointHarpDrop";
    pAsset13.group_id = "special";
    pAsset13.can_be_removed_by_divine_light = true;
    pAsset13.can_be_given = false;
    pAsset13.can_be_removed = false;
    pAsset13.is_kingdom_affected = true;
    pAsset13.affects_mind = true;
    pAsset13.forced_kingdom = "harp";
    pAsset13.is_mutation_box_allowed = false;
    this.add(pAsset13);
    ActorTrait t14 = this.t;
    t14.action_on_augmentation_add = t14.action_on_augmentation_add + new WorldActionTrait(ActionLibrary.forcedKingdomAdd);
    ActorTrait t15 = this.t;
    t15.action_on_augmentation_remove = t15.action_on_augmentation_remove + new WorldActionTrait(ActionLibrary.forcedKingdomEffectRemove);
    ActorTrait t16 = this.t;
    t16.action_on_augmentation_load = t16.action_on_augmentation_load + new WorldActionTrait(ActionLibrary.madnessEffectLoad);
    this.t.addDecision("follow_desire_target");
    this.t.traits_to_remove_ids = new string[4]
    {
      "desire_alien_mold",
      "desire_computer",
      "desire_golden_egg",
      "madness"
    };
    this.t.addOpposite("strong_minded");
    this.t.addOpposite("madness");
    this.t.addOpposite("desire_alien_mold");
    this.t.addOpposite("desire_computer");
    this.t.addOpposite("desire_golden_egg");
    this.t.base_stats["multiplier_speed"] = 0.3f;
    this.t.base_stats["multiplier_attack_speed"] = 0.3f;
  }

  public override void post_init()
  {
    base.post_init();
    foreach (ActorTrait actorTrait1 in this.list)
    {
      if (((double) actorTrait1.base_stats["health"] > 0.0 || (double) actorTrait1.base_stats["mana"] > 0.0 || (double) actorTrait1.base_stats["stamina"] > 0.0 || (double) actorTrait1.base_stats["multiplier_health"] > 0.0 || (double) actorTrait1.base_stats["multiplier_mana"] > 0.0 ? 1 : ((double) actorTrait1.base_stats["multiplier_stamina"] > 0.0 ? 1 : 0)) != 0)
      {
        ActorTrait actorTrait2 = actorTrait1;
        actorTrait2.action_on_augmentation_add = actorTrait2.action_on_augmentation_add + new WorldActionTrait(ActionLibrary.restoreFullStats);
      }
      if (((double) actorTrait1.base_stats["health"] < 0.0 || (double) actorTrait1.base_stats["mana"] < 0.0 || (double) actorTrait1.base_stats["stamina"] < 0.0 || (double) actorTrait1.base_stats["multiplier_health"] < 0.0 || (double) actorTrait1.base_stats["multiplier_mana"] < 0.0 ? 1 : ((double) actorTrait1.base_stats["multiplier_stamina"] < 0.0 ? 1 : 0)) != 0)
      {
        ActorTrait actorTrait3 = actorTrait1;
        actorTrait3.action_on_augmentation_remove = actorTrait3.action_on_augmentation_remove + new WorldActionTrait(ActionLibrary.restoreFullStats);
      }
    }
  }

  public override ActorTrait add(ActorTrait pAsset)
  {
    base.add(pAsset);
    this.checkDefault(pAsset);
    return pAsset;
  }

  public override void linkAssets()
  {
    base.linkAssets();
    foreach (ActorTrait actorTrait in this.list)
    {
      if (actorTrait.is_mutation_box_allowed)
        this.pot_traits_mutation_box.Add(actorTrait);
    }
    foreach (ActorTrait actorTrait in this.list)
    {
      if (actorTrait.rate_birth != 0)
      {
        for (int index = 0; index < actorTrait.rate_birth; ++index)
          this.pot_traits_birth.Add(actorTrait);
      }
    }
    foreach (ActorTrait actorTrait in this.list)
    {
      if (actorTrait.rate_acquire_grow_up != 0)
      {
        for (int index = 0; index < actorTrait.rate_acquire_grow_up; ++index)
          this.pot_traits_growup.Add(actorTrait);
      }
    }
    foreach (ActorTrait actorTrait in this.list)
    {
      if (actorTrait.in_training_dummy_combat_pot)
        this.pot_traits_combat.Add(actorTrait);
    }
  }

  private void checkDefault(ActorTrait pAsset)
  {
    if (pAsset.rate_inherit != 0)
      return;
    pAsset.rate_inherit = pAsset.rate_birth * 10;
  }

  public int checkTraitsMod(Actor pMain, Actor pTarget)
  {
    int num = 0;
    foreach (ActorTrait trait in (IEnumerable<ActorTrait>) pMain.getTraits())
    {
      if (trait.same_trait_mod != 0 && pTarget.hasTrait(trait))
        num += trait.same_trait_mod;
      if (trait.opposite_trait_mod != 0)
      {
        foreach (ActorTrait oppositeTrait in trait.opposite_traits)
        {
          if (pTarget.hasTrait(oppositeTrait))
            num += trait.opposite_trait_mod;
        }
      }
    }
    return num;
  }
}
