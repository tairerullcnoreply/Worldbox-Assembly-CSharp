// Decompiled with JetBrains decompiler
// Type: HindiCorrector
// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EAF20368-35E7-4BB6-B082-5477D61019A6
// Assembly location: C:\Users\Takko\Downloads\Worldbox .NET\Assembly-CSharp.dll

using System;

#nullable disable
public class HindiCorrector
{
  private static string[] hindi_letters = new string[178]
  {
    "‘",
    "’",
    "“",
    "”",
    "(",
    ")",
    "{",
    "}",
    "=",
    "।",
    "?",
    "-",
    "µ",
    "॰",
    ",",
    ".",
    "् ",
    "०",
    "१",
    "२",
    "३",
    "४",
    "५",
    "६",
    "७",
    "८",
    "९",
    "x",
    ":",
    "ल्म",
    "ङ",
    "ऩ",
    "ऱ",
    "य़",
    "ग़",
    "ड़",
    "ढ़",
    "ख़्य",
    "ख़्",
    "ख़",
    "क़्य",
    "क़्",
    "क़",
    "फ़्",
    "फ़",
    "ज़्य",
    "ज़्",
    "ज़",
    "त्त्",
    "त्त",
    "क्त",
    "दृ",
    "कृ",
    "ह्न",
    "ह्य",
    "हृ",
    "ह्म",
    "ह्र",
    "ह्",
    "द्द",
    "क्ष्",
    "क्ष",
    "त्र्",
    "त्र",
    "ज्ञ",
    "छ्य",
    "ट्य",
    "ठ्य",
    "ड्य",
    "ढ्य",
    "द्य",
    "द्व",
    "श्र",
    "ट्र",
    "ड्र",
    "ढ्र",
    "छ्र",
    "क्र",
    "फ्र",
    "द्र",
    "प्र",
    "ग्र",
    "रु",
    "रू",
    "्र",
    "ओ",
    "औ",
    "आ",
    "अ",
    "ई",
    "इ",
    "उ",
    "ऊ",
    "ऐ",
    "ए",
    "ऋ",
    "क्",
    "क",
    "क्क",
    "ख्",
    "ख",
    "ग्",
    "ग",
    "घ्",
    "घ",
    "ङ",
    "चै",
    "च्",
    "च",
    "छ",
    "ज्",
    "ज",
    "झ्",
    "झ",
    "ञ",
    "ट्ट",
    "ट्ठ",
    "ट",
    "ठ",
    "ड्ड",
    "ड्ढ",
    "ड",
    "ढ",
    "ण्",
    "ण",
    "त्",
    "त",
    "थ्",
    "थ",
    "द्ध",
    "द",
    "ध्",
    "ध",
    "न्",
    "न",
    "प्",
    "प",
    "फ्",
    "फ",
    "ब्",
    "ब",
    "भ्",
    "भ",
    "म्",
    "म",
    "य्",
    "य",
    "र",
    "ल्",
    "ल",
    "ळ",
    "व्",
    "व",
    "श्",
    "श",
    "ष्",
    "ष",
    "स्",
    "स",
    "ह",
    "ऑ",
    "ॉ",
    "ो",
    "ौ",
    "ा",
    "ी",
    "ु",
    "ू",
    "ृ",
    "े",
    "ै",
    "ं",
    "ँ",
    "ः",
    "ॅ",
    "ऽ",
    "् ",
    "्"
  };
  private static string[] replace_letters = new string[178]
  {
    "^",
    "*",
    "Þ",
    "ß",
    "\u00BC",
    "\u00BD",
    "¿",
    "À",
    "\u00BE",
    "A",
    "\\",
    "&",
    "&",
    "Œ",
    "]",
    "-",
    "~ ",
    "å",
    "ƒ",
    "„",
    "…",
    "†",
    "‡",
    "ˆ",
    "‰",
    "Š",
    "‹",
    "Û",
    "%",
    "Ye",
    "\u00B3",
    "u+",
    "j+",
    ";+",
    "x+",
    "M+",
    "<+",
    "[+;",
    "[+",
    "[k+",
    "D+;",
    "D+",
    "d+",
    "¶+",
    "Q+",
    "T+;",
    "T+",
    "t+",
    "Ù",
    "Ùk",
    "Dr",
    "–",
    "—",
    "à",
    "á",
    "â",
    "ã",
    "ºz",
    "º",
    "í",
    "{",
    "{k",
    "«",
    "=",
    "K",
    "Nî",
    "Vî",
    "Bî",
    "Mî",
    "<î",
    "|",
    "}",
    "J",
    "Vª",
    "Mª",
    "<ªª",
    "Nª",
    "Ø",
    "Ý",
    "æ",
    "ç",
    "xz",
    "#",
    ":",
    "z",
    "vks",
    "vkS",
    "vk",
    "v",
    "bZ",
    "b",
    "m",
    "Å",
    ",s",
    ",",
    "_",
    "D",
    "d",
    "ô",
    "[",
    "[k",
    "X",
    "x",
    "?",
    "?k",
    "\u00B3",
    "pkS",
    "P",
    "p",
    "N",
    "T",
    "t",
    "÷",
    ">",
    "¥",
    "ê",
    "ë",
    "V",
    "B",
    "ì",
    "ï",
    "M",
    "<",
    ".",
    ".k",
    "R",
    "r",
    "F",
    "Fk",
    ")",
    "n",
    "/",
    "/k",
    "U",
    "u",
    "I",
    "i",
    "¶",
    "Q",
    "C",
    "c",
    "H",
    "Hk",
    "E",
    "e",
    "¸",
    ";",
    "j",
    "Y",
    "y",
    "G",
    "O",
    "o",
    "'",
    "'k",
    "\"",
    "\"k",
    "L",
    "l",
    "g",
    "v‚",
    "‚",
    "ks",
    "kS",
    "k",
    "h",
    "q",
    "w",
    "`",
    "s",
    "S",
    "a",
    "¡",
    "%",
    "W",
    "·",
    "~ ",
    "~"
  };

  public static string GetCorrectedHindiText(string unicode_substring)
  {
    int length = HindiCorrector.hindi_letters.Length;
    string Source = unicode_substring;
    for (int index = Source.IndexOf("'", StringComparison.Ordinal); index >= 0; index = Source.IndexOf("'", StringComparison.Ordinal))
      Source = HindiCorrector.ReplaceFirstOccurrence(HindiCorrector.ReplaceFirstOccurrence(Source, "'", "^"), "'", "*");
    for (int index = Source.IndexOf("\"", StringComparison.Ordinal); index >= 0; index = Source.IndexOf("\"", StringComparison.Ordinal))
      Source = HindiCorrector.ReplaceFirstOccurrence(HindiCorrector.ReplaceFirstOccurrence(Source, "\"", "ß"), "\"", "Þ");
    for (int index = Source.IndexOf("ि", StringComparison.Ordinal); index != -1; index = Source.IndexOf("ि", index + 1, StringComparison.Ordinal))
    {
      char ch = Source[index - 1];
      int num;
      for (Source = Source.Replace(ch.ToString() + "ि", "f" + ch.ToString()); Source.Contains("्f" + ch.ToString()); Source = Source.Replace($"{Source[num - 1].ToString()}्f{ch.ToString()}", $"f{Source[num - 1].ToString()}्{ch.ToString()}"))
        num = Source.IndexOf("्f" + ch.ToString(), StringComparison.Ordinal);
    }
    string str1 = "ािीुूृेैोौं:ँॅ";
    string str2 = Source + "  ";
    for (int index = str2.IndexOf("र्", StringComparison.Ordinal); index > 0; index = str2.IndexOf("र्", StringComparison.Ordinal))
    {
      int num = index + 2;
      if (str2[num + 1] == '्')
        num += 2;
      for (char ch = str2[num + 1]; str1.IndexOf(ch) != -1; ch = str2[num + 1])
        ++num;
      string str3 = str2.Substring(index + 2, num - index - 1);
      str2 = str2.Replace("र्" + str3, str3 + "Z");
    }
    string correctedHindiText = str2.Substring(0, str2.Length - 2);
    for (int index = 0; index < length; ++index)
    {
      int num = 0;
      if (correctedHindiText.Contains(HindiCorrector.hindi_letters[index]))
      {
        for (; num != -1; num = correctedHindiText.IndexOf(HindiCorrector.hindi_letters[index], StringComparison.Ordinal))
          correctedHindiText = correctedHindiText.Replace(HindiCorrector.hindi_letters[index], HindiCorrector.replace_letters[index]);
      }
    }
    return correctedHindiText;
  }

  public static string ReplaceFirstOccurrence(string Source, string Find, string Replace)
  {
    int startIndex = Source.IndexOf(Find, StringComparison.Ordinal);
    return startIndex < 0 ? Source : Source.Remove(startIndex, Find.Length).Insert(startIndex, Replace);
  }
}
